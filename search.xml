<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链表相关</title>
      <link href="/2023/04/09/algorithm-linked-list/"/>
      <url>/2023/04/09/algorithm-linked-list/</url>
      
        <content type="html"><![CDATA[<h1 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h1><table><thead><tr><th align="left">题目</th></tr></thead><tbody><tr><td align="left"><a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">合并两个有序列表</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">合并 K 个升序链表</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/partition-list/" target="_blank" rel="noopener">分割链表</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">删除链表的倒数第 N 个结点</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">链表的中间结点</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/linked-list-cycle/" target="_blank" rel="noopener">环形链表</a></td></tr><tr><td align="left"><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">相交链表</a></td></tr></tbody></table><h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> list2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟头节点</span>    head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    p <span class="token operator">:=</span> head    <span class="token keyword">for</span> <span class="token punctuation">;</span>list1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> list2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 比较值的大小，并赋值到新的链表</span>        <span class="token keyword">if</span> list1<span class="token punctuation">.</span>Val <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1            list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>Next            <span class="token comment" spellcheck="true">// 不用断开list1 和 list1.Next,因为后续p.Next 指向谁就是修改谁的作用域</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2            list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// p 不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// list1 还没遍历完</span>    <span class="token keyword">if</span> list1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// list2 还没遍历完</span>    <span class="token keyword">if</span> list2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并-K-个升序链表"><a href="#合并-K-个升序链表" class="headerlink" title="合并 K 个升序链表"></a>合并 K 个升序链表</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>lists <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 和合并两个有序数组类似，本次使用方法1</span>    <span class="token comment" spellcheck="true">// 方法1 类似归并排序，两两合并，最后合并成一个</span>    <span class="token comment" spellcheck="true">// 方法2 顺序合并，n-1此合并</span>    <span class="token keyword">var</span> merge <span class="token keyword">func</span><span class="token punctuation">(</span>lists <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode    merge <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>lists <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ListNode<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 终止条件</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> right <span class="token punctuation">{</span>            <span class="token keyword">return</span> lists<span class="token punctuation">[</span>left<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> left <span class="token operator">></span> right <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        mid <span class="token operator">:=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        l1 <span class="token operator">:=</span> <span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        l2 <span class="token operator">:=</span> <span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span><span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    p <span class="token operator">:=</span> head    <span class="token keyword">for</span> <span class="token punctuation">;</span>l1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>Val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l2            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// p向前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当l1还没结束</span>    <span class="token keyword">if</span> l1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当l2还没结束</span>    <span class="token keyword">if</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>Next <span class="token operator">=</span> l2    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分割链表"><a href="#分割链表" class="headerlink" title="分割链表"></a>分割链表</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">partition</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分割成两个链表，一个链表小于x 一个链表大于x</span>    head1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    p1 <span class="token operator">:=</span> head1    head2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    p2 <span class="token operator">:=</span> head2    <span class="token keyword">for</span> <span class="token punctuation">;</span>head <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> head<span class="token punctuation">.</span>Val <span class="token operator">&lt;</span> x <span class="token punctuation">{</span>            p1<span class="token punctuation">.</span>Next <span class="token operator">=</span> head            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p2<span class="token punctuation">.</span>Next <span class="token operator">=</span> head            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 断开head head.Next两个节点的连接</span>        <span class="token comment" spellcheck="true">// 因为p1 p2是新构造出来的节点，所以需要断开head和head.Next</span>        tmp <span class="token operator">:=</span> head<span class="token punctuation">.</span>Next        head<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token boolean">nil</span>        head <span class="token operator">=</span> tmp    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 两个链表接起来</span>    p1<span class="token punctuation">.</span>Next <span class="token operator">=</span> head2<span class="token punctuation">.</span>Next    <span class="token keyword">return</span> head1<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a>删除链表的倒数第 N 个结点</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到倒数第n + 1个节点</span>    <span class="token comment" spellcheck="true">// 防止删掉头节点时越界操作，要虚拟出来一个节点</span>    newHead <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span><span class="token punctuation">}</span>    newHead<span class="token punctuation">.</span>Next <span class="token operator">=</span> head    p1 <span class="token operator">:=</span> newHead    p2 <span class="token operator">:=</span> newHead    <span class="token keyword">for</span> <span class="token punctuation">;</span> p1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>Next        n<span class="token operator">--</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span> p1 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>Next        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删p2.Next</span>    tmp <span class="token operator">:=</span> p2<span class="token punctuation">.</span>Next    p2<span class="token punctuation">.</span>Next <span class="token operator">=</span> p2<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next    tmp<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表的中间结点"><a href="#链表的中间结点" class="headerlink" title="链表的中间结点"></a>链表的中间结点</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 双指针技巧 第一个指针走2步 第二个指针走1步</span>    p1 <span class="token operator">:=</span> head    p2 <span class="token operator">:=</span> head    <span class="token keyword">for</span> <span class="token punctuation">;</span> p1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> p1<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><pre class="line-numbers language-go"><code class="language-go">    <span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用hash法做一下</span>    nodes <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>ListNode<span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> nodes<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            nodes<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * type ListNode struct { *     Val int *     Next *ListNode * } */</span><span class="token keyword">func</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>headA<span class="token punctuation">,</span> headB <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 双指针法，让两个链表接起来，则相遇的时候就是交点</span>    p1 <span class="token operator">:=</span> headA    p2 <span class="token operator">:=</span> headB    <span class="token keyword">for</span> <span class="token punctuation">;</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> p1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            p1 <span class="token operator">=</span> headB        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token keyword">if</span> p2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            p2 <span class="token operator">=</span> headA        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 相交点</span>    <span class="token keyword">return</span> p1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法详解</title>
      <link href="/2022/11/27/algorithm-dp/"/>
      <url>/2022/11/27/algorithm-dp/</url>
      
        <content type="html"><![CDATA[<p>动态规划的核心问题是穷举，因为要求最值，肯定要把所有可行的答案都穷举出来，然后再其中找最值。</p><p>首先，动态规划的问题存在<strong>重叠子问题</strong>，如果暴力穷举，效率会极其低下，所以需要“备忘录”或“DP table”来优化穷举过程。<br>其次，动态规划的问题一定会具备<strong>最优子结构</strong>，这样才能通过子问题的最值得到原问题的最值<br>最后，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解并不是一件容易的事情，只有列出正确的<strong>状态转移方程</strong>，才能正确的穷举。</p><p>核心套路：状态、选择、dp数组的定义</p><pre><code># 初始化base casedp[0][0][...] = base case# 进行状态转移for 状态1 in 状态1的所有取值：  for 状态2 in 状态2的所有取值：      for ...        dp[状态1][状态2][...] = 求最值(选择1， 选择2, ...)</code></pre><h1 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h1><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：<br>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p><p>示例 1：<br>输入：n = 2<br>输出：1</p><p>示例 2：<br>输入：n = 5<br>输出：5</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="递归：定义dp-i-为f-i"><a href="#递归：定义dp-i-为f-i" class="headerlink" title="递归：定义dp[i]为f(i)"></a>递归：定义dp[i]为f(i)</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">==</span>  <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归计算</span>    dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> n<span class="token number">-2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dp-table：定义dp-i-为f-i"><a href="#dp-table：定义dp-i-为f-i" class="headerlink" title="dp table：定义dp[i]为f(i)"></a>dp table：定义dp[i]为f(i)</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化base case</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// 状态转移</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="凑零钱"><a href="#凑零钱" class="headerlink" title="凑零钱"></a>凑零钱</h2><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。<br>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。<br>你可以认为每种硬币的数量是无限的。</p><p>示例 1：<br>输入：coins = [1, 2, 5], amount = 11<br>输出：3<br>解释：11 = 5 + 5 + 1</p><p>示例 2：<br>输入：coins = [2], amount = 3<br>输出：-1</p><p>示例 3：<br>输入：coins = [1], amount = 0<br>输出：0</p><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><h4 id="递归，dp-i-value-凑i需要最少value个硬币"><a href="#递归，dp-i-value-凑i需要最少value个硬币" class="headerlink" title="递归，dp[i] = value  凑i需要最少value个硬币"></a>递归，dp[i] = value  凑i需要最少value个硬币</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化dp数组  dp[i] = value  凑i需要最少value个硬币</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> coins <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否已经计算过dp[amount]</span>    <span class="token keyword">if</span> amount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> amount <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归计算 dp[n] = min(dp(n-coin) + 1)</span>    res <span class="token operator">:=</span> <span class="token number">100000</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> coin <span class="token operator">:=</span> <span class="token keyword">range</span> coins <span class="token punctuation">{</span>        subproblem <span class="token operator">:=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> coins<span class="token punctuation">,</span> amount <span class="token operator">-</span> coin<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 子问题无解 跳过</span>        <span class="token keyword">if</span> subproblem <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> subproblem <span class="token operator">&lt;</span> res <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> subproblem        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">100000</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">=</span> res    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dp-table，dp-i-value-凑i需要最少value个硬币"><a href="#dp-table，dp-i-value-凑i需要最少value个硬币" class="headerlink" title="dp table，dp[i] = value  凑i需要最少value个硬币"></a>dp table，dp[i] = value  凑i需要最少value个硬币</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> amount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> amount <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化dp数组  dp[i] = value  凑i需要最少value个硬币</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化为很大</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10001</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> coin <span class="token operator">:=</span> <span class="token keyword">range</span> coins <span class="token punctuation">{</span>            <span class="token keyword">if</span> i <span class="token operator">-</span> coin <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 给的数组不一定是递增的，后面的还要测</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">10001</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：<br>输入：nums = [10,9,2,5,3,7,101,18]<br>输出：4<br>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p><p>示例 2：<br>输入：nums = [0,1,0,3,2,3]<br>输出：4</p><p>示例 3：<br>输入：nums = [7,7,7,7,7,7,7]<br>输出：1</p><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><h4 id="dp-table，dp-i-为表示以nums-i-为结尾的数组的最长递增子序列的长度"><a href="#dp-table，dp-i-为表示以nums-i-为结尾的数组的最长递增子序列的长度" class="headerlink" title="dp table，dp[i]为表示以nums[i]为结尾的数组的最长递增子序列的长度"></a>dp table，dp[i]为表示以nums[i]为结尾的数组的最长递增子序列的长度</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// dp[i] 表示以nums[i]为结尾的数组的最长递增子序列的长度</span>    <span class="token comment" spellcheck="true">// 那么 dp[i] = 遍历小于i的dp[i-1]，当nums[i] > nums[i-1]  就加1</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化数组的最大子序列长度</span>    ret <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化dp 每个位置 最长子序列至少是1</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">// 计算dp[i]</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最大子数组"><a href="#最大子数组" class="headerlink" title="最大子数组"></a>最大子数组</h2><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组 是数组中的一个连续部分。</p><p>示例 1：<br>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p><p>示例 2：<br>输入：nums = [1]<br>输出：1</p><p>示例 3：<br>输入：nums = [5,4,-1,7,8]<br>输出：23</p><h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><h4 id="dp-table-dp-i-为以nums-i-结尾的最大子数组和"><a href="#dp-table-dp-i-为以nums-i-结尾的最大子数组和" class="headerlink" title="dp table, dp[i]为以nums[i]结尾的最大子数组和"></a>dp table, dp[i]为以nums[i]结尾的最大子数组和</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义dp数组，dp[i]为以nums[i]结尾的最大子数组和</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    ret <span class="token operator">:=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 状态转移</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。<br>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p><p>示例 1：<br>输入：text1 = “abcde”, text2 = “ace”<br>输出：3<br>解释：最长公共子序列是 “ace” ，它的长度为 3 。</p><p>示例 2：<br>输入：text1 = “abc”, text2 = “abc”<br>输出：3<br>解释：最长公共子序列是 “abc” ，它的长度为 3 。</p><p>示例 3：<br>输入：text1 = “abc”, text2 = “def”<br>输出：0<br>解释：两个字符串没有公共子序列，返回 0 。</p><h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><h4 id="dp-table，dp-i-j-为str1-0-i-和str2-0-j-最长公共子序列的长度"><a href="#dp-table，dp-i-j-为str1-0-i-和str2-0-j-最长公共子序列的长度" class="headerlink" title="dp table，dp[i][j]为str1[0:i]和str2[0:j]最长公共子序列的长度"></a>dp table，dp[i][j]为str1[0:i]和str2[0:j]最长公共子序列的长度</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>text1 <span class="token builtin">string</span><span class="token punctuation">,</span> text2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// dp[i][j] 为text1[0:i] 和 text2[0:j]的最长公共自序列</span>    <span class="token comment" spellcheck="true">// 默认初始化零</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dp <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ret <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">// 状态转移， 用dp[i+1][j+1]来替换dp[i][j]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相同 则等于text1[0:i] 和 text2[0:j]的公共子序列长度+1</span>                dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 不相同则等于text1[0:i-1] 和 text2[0:j]中的公共子序列长度</span>                <span class="token comment" spellcheck="true">// 与 text1[0:i] 和 text2[0:j-1]公共子序列长度较大的</span>                dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><h2 id="以插入最小次数构造回文串"><a href="#以插入最小次数构造回文串" class="headerlink" title="以插入最小次数构造回文串"></a>以插入最小次数构造回文串</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka - 主题与分区</title>
      <link href="/2022/10/30/kafka-topic-and-partition/"/>
      <url>/2022/10/30/kafka-topic-and-partition/</url>
      
        <content type="html"><![CDATA[<p>分区的划分不仅为 Kafka 提供了可伸缩性、水平扩展的功能，还通过多副本机制来为 Kafka 提供数据冗余以提高数据可靠性。</p><h1 id="主题的管理"><a href="#主题的管理" class="headerlink" title="主题的管理"></a>主题的管理</h1><p>主题的管理包括创建主题、 查看主题信息、修改主题和删除主题等操作。</p><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><p>如果 broker 端配置参数 auto.create.topics.enable 设置 true （默认值就是 true) , 那么当生产者向一个尚未创建的主题发送消息时，会自动创建一个分区数为 num.partitions（默认值为1 ）、副本因子为 default.replication.factor （默认值为1 ）的主题。</p><p>例：</p><pre><code>bin/kafka-top cs .sh - zookeeper localhost: 2181/kafka --create --topic top create --partitions 4 --replication-factor 2</code></pre><p>在执行完脚本之后， Kafka 会在 log.dir log.dirs 参数所配置的目录下创建相应的主题分区，默认情况下这个目录为／tmp/kafka-logs／</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221030211533.png"><p>topic-create-0 topic-create-1对应了主题的两个分区，其余两个分区被创建到了别的节点</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221030211753.png"><p>主题、分区、副本和 Log （日志）的关系如下</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221030211824.png"><p>我们不仅可以通过日志文件的根目录来查看集群中各个 broker 的分区副本的分配情况，还可以通过 ZooKeeper 客户端来获取。<br>当创建一个主题时会在 zooKeeper 的／ brokers/topics/ 目录下创建一个同名的实节点，该节点记录了该主题的分区副本分配方案。</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221030212257.png"><p>示例数据中的 “2”：[1, 2] 表示分区2 分配了2个副本，分别在 brokerld 1和 brokerId 2节点中。</p><p>kafka topics脚本中还提供了 replica-assignment 参数来手动指定分区副本的分配方案。<br>replica assignment 参数的用法归纳如下：<br><code>-- replica-assignment &lt;String : broker_id_ for_part1_replica1: broker_id for partl_replica2 , broker_id _for_part2_replica1: broker_ id_ for _part2_replica2 , ... &gt;</code><br>这种方式根据分区号的数值大小按照从小到大的顺序进行排列 分区与分区 逗号 “，”<br>隔开，分区内多个副本用冒号“：”隔开</p><p>创建主题时不能存在同名的主题，如果指定参数<code>if-not-exists</code>则在冲突时不做处理。<br>内部主题一般以双下划线开头’__’</p><h2 id="分区副本的分配"><a href="#分区副本的分配" class="headerlink" title="分区副本的分配"></a>分区副本的分配</h2><p>分区分配是指为集群制定创建主题时的分区副本分配方案，即在哪个 broker 中创建哪些分区的副本。</p><p>在创建主题时，如果使用了 replica assignment 参数，那么就按照指定的方案来进分区副本的创建；如果没有使用 replica-assignment 参数，那么就需要按照内部的逻辑来计算分配方案了</p><p>使用 kafka-topics.sh 脚本创建主题时的内部分配逻辑按照机架信息划分成两种策略 朱指定机架信息和指定机架信息 如果集群中所有的 brok 节点都没有配置broker.rack 参数，或者使用 disable-rack aware 参数来 建主题，那么采用的就是未指定机架信息的分配策略，否则采用的就是指定机架信息的分配策略。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> def assignRepl <span class="token function">casToBrokersRackUnaware</span><span class="token punctuation">(</span>  nPartit ons<span class="token operator">:</span> Int <span class="token punctuation">,</span> ／／分区数  replicat on Factor<span class="token operator">:</span> Int <span class="token punctuation">,</span> ／／副本 因子  brokerList <span class="token operator">:</span> “ q<span class="token punctuation">[</span>Int<span class="token punctuation">]</span> <span class="token punctuation">,</span> ／／；集群中 broker 列表  fixedStartindex<span class="token operator">:</span> Int <span class="token punctuation">,</span> ／／起始索 引，即 一个副本分自己的位置，默认值为  startPartitionid<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> ／／起始分 编号，默认值为  Map<span class="token punctuation">[</span>Int<span class="token punctuation">,</span> Seq<span class="token punctuation">[</span>Int<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>     val ret <span class="token operator">=</span> mutable<span class="token punctuation">.</span>Map<span class="token punctuation">[</span>Int<span class="token punctuation">,</span> Seg<span class="token punctuation">[</span>Int<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> ／／保存分自己结果的集合    val brokerArray <span class="token operator">=</span> brokerList<span class="token punctuation">.</span>toArray <span class="token comment" spellcheck="true">//brokerid 的列表</span>    ／／如果起始索 fixedStartindex 小于<span class="token number">0</span> ，则根据 broker 列表长度随机生成一个，以此来保证是    ／／；有效的 broker Id     val startIndex <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedStartindex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> fixedStartindex       <span class="token keyword">else</span> rand<span class="token punctuation">.</span><span class="token function">nextint</span><span class="token punctuation">(</span>brokerArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     ／／确保起始分区号不小于<span class="token number">0</span>    var currentPartitionId <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>O <span class="token punctuation">,</span> startPartitionid<span class="token punctuation">)</span>    ／／指定了副本的间隔，目的是为了更均匀地将副本分配到不同的 broker    var nextReplicaShift <span class="token operator">=</span> <span class="token keyword">if</span> xedStartindex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> fixedStartindex      <span class="token keyword">else</span> rand<span class="token punctuation">.</span><span class="token function">nextint</span><span class="token punctuation">(</span>brokerArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     ／／轮询所有分区， 将每个分区的副本分配到不同的 broker    <span class="token keyword">for</span> <span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">0</span> until nPartitions<span class="token punctuation">)</span> <span class="token punctuation">(</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPartitionid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>currentPartitonId <span class="token operator">%</span> brokerArray<span class="token punctuation">.</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>       nextReplicaShift <span class="token operator">+=</span> <span class="token number">1</span>       val firstReplicaindex <span class="token operator">=</span> <span class="token punctuation">(</span>currentPartitionid <span class="token operator">+</span> startindex ）<span class="token operator">%</span> brokerArray<span class="token punctuation">.</span>length      val replicaBuffer <span class="token operator">=</span> mutable <span class="token punctuation">.</span> <span class="token function">ArrayBuffer</span><span class="token punctuation">(</span><span class="token function">brokerArray</span><span class="token punctuation">(</span>firstReplicaindex<span class="token punctuation">)</span><span class="token punctuation">)</span>       ／／保存该分区所有副本分自己的 br oker集合      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">0</span> until replicatFactor <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>         replicaBuffer <span class="token operator">+=</span> <span class="token function">brokerArray</span> <span class="token punctuation">(</span>         <span class="token function">replicaIndex</span><span class="token punctuation">(</span>firstReplicaIndex ，nextReplicaShift        j<span class="token punctuation">,</span> brokerArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> ／／ 为其余的副本分配 broker        ／／保存该分区所有副本的分配信息        ret<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>currentPartitionid<span class="token punctuation">,</span> replicaBuffer<span class="token punctuation">)</span>         ／／继续为 下一个分区分配副本        currentPartitionid <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    ret    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看主题"><a href="#查看主题" class="headerlink" title="查看主题"></a>查看主题</h2><p>kafka-topics. 脚本有4种指令类型： create list describe alter<br>其中list describe 指令可用来方便地查看主题信息</p><p>增加 topics-with-overrides 参数可以找 所有 含覆盖配置 主题 它只会列出包含了与集群不一样配置的主题</p><p>under-replicated-partitions 和 unavai able-partitions 参数可以找出有问题的分区。</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>当一个主题被创建之后 依然允许对其做一定的修改，比如修改分区个数、修改配置。这是由alert指令提供的</p><p>增加主题的分区数目后，当主题中的消息包含 key 时（即 key 不为 null 根据 key计算分区的行为就会受到影响。</p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>kafka-configs 脚本是专门用来对配置进行操作的，这里的操作是指在运行状态下修改原有的配置，如此可以达到动态变更的目的。</p><p>kafka configs.sh 脚本不仅可以支持操作主题相关的配置，还支持操作broker 、用户和客户端这三个类型 配置。</p><h2 id="主题端参数"><a href="#主题端参数" class="headerlink" title="主题端参数"></a>主题端参数</h2><p>与主题相关的所有配置参数在 broker 层面都有对应参数，<br>比如主题端参数 cleanup.policy 对应 broker 层面的 log.cleanup policy</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222237.png"><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222301.png"><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222336.png"><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222348.png"><h2 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h2><p>kafka-topics.sh 脚本中的 delete 令就可以用来删除主题</p><p>使用 kafka_topics.sh 脚本删除主题的行为本质上只是在 ZooKeeper 中的 /admin/delete_topics 路径下 建一个与待删除主题同名的节点，以 标记该主题为待删除的状态。与创建主题相同的是，真正删除主题的动作也是由 Kafka 的控制器负责完成的。</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222536.png"><img src="/2022/10/30/kafka-topic-and-partition/img-20221106222544.png"><h1 id="初识-KafkaAdminClient"><a href="#初识-KafkaAdminClient" class="headerlink" title="初识 KafkaAdminClient"></a>初识 KafkaAdminClient</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>和脚本类似，可以使用Topicommand类创建主题等。</p><ul><li>创建主题 CreateTopicsResult createTopics(Collection<newtopic> newTopics)</newtopic></li><li>删除主题 DeleteTopicsResult deleteTopics(Collection<string> topics)</string></li><li>列出所有可用的主题： ListTopicsResult listTopics()</li><li>查看主题的信息： DescribeTopicsResult describeTopics(Collection<string> topicNames)</string></li><li>查询配置信息 escribeConfigsResult describeConfigs(Collection<configresource> resources)</configresource></li><li>修改配置信息： AlterConfigsResult alterConfigs(Map&lt;ConfigResource, Config&gt; configs)</li><li>增加分区 CreatePartitionsResult createPartitions(Map&lt;String, NewPartitions&gt; new Partitions)</li></ul><h2 id="主题合法性验证"><a href="#主题合法性验证" class="headerlink" title="主题合法性验证"></a>主题合法性验证</h2><p>Kafka broker 端有－个这样的参数 create.topic.policy.class.name，默认值为null<br>它提供了一个入口用来验证主题创建的合法性。使用方式很简单，只需要自定义实现org.apache.kafka.server.policy.CreateTopicPolicy 接口</p><p>例：</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221106223639.png"><h1 id="分区的管理"><a href="#分区的管理" class="headerlink" title="分区的管理"></a>分区的管理</h1><h2 id="优先副本的选举"><a href="#优先副本的选举" class="headerlink" title="优先副本的选举"></a>优先副本的选举</h2><p>分区使用多副本机制来提升可靠性，但只有 leader 副本对外提供读写服务，而 follower本只负责在内部进行消息的同步。</p><p>优先副本选举是指通过一定的方法促使副本选举为 leader ，以此来促进集群负载均衡 行为 可以称为“分区平衡”</p><p>Kafka 中可以提供分区自动平衡的功能，与此对应的 broker 端参数是 auto.leader.rebalance.enable ，此参数的默认值为 true。Kafka 的控制器会启动一个定时任务，默认5分钟执行一次，这个定时任务会轮询所有的 broker节点，计算每个 broker 节点的分区不平衡率是否超过默认值10%</p><p>kafka-perferred-replica election.sh 脚本提供了对分区 leader 副本进行重新平衡的功能。</p><h2 id="分区重分配"><a href="#分区重分配" class="headerlink" title="分区重分配"></a>分区重分配</h2><p>当集群中的一个节点突然若机下线时，如果节点上的分区是单副本的，那么这些分区就变得不可用了，在节点恢复前，相应的数据也就处于丢失状态；如果节点上的分区是多副本的，那么位于这个节点上的 leader 副本的角色会转交到集群的其他 follower 副本 。</p><p>当集群中新增 roker 节点时，只有新创建的主题分区才有可能被分配到这个节点上，而之前的主题分区并不会自动分配到新加入的节点中，因为在它们被创建时还没有这个新节点，这样新节点的负载和原先节点的负载之间严重不均衡。</p><p>Kafka提供了 kafka-reassin-partitions.sh 脚本来执行分区重分配的工作，它可以在集群扩容、broker节点失效的场景下对分区进行迁移。</p><h2 id="复制限流"><a href="#复制限流" class="headerlink" title="复制限流"></a>复制限流</h2><p>分区重分配本质在于数据复制，先增加新的副本，然后进行数据同步，最后删除旧的副本来达到最终的目的。</p><p>副本间的复制限流有两种实现方式： kafka-config.sh 脚本和 kafka-reassign-partitions.sh脚本</p><ul><li><p>kafka-config.sh脚本主要 以动态配置的方式来达到限流的目的，在 broker 级别有两个与复制限流相关的配置参数 follower.replication.throttled.rate 和 leader.replication.throttled.rate ，前者用于设置 follower 副本复制的速度，后者用于设置 leader 副本传输的速度，它们的单位都是B/s 。</p></li><li><p>kafka reassign-partitions.sh 脚本本身也提供了限流的功能，只需一个 throttle 参数即可，</p></li></ul><h2 id="修改副本因子"><a href="#修改副本因子" class="headerlink" title="修改副本因子"></a>修改副本因子</h2><p>修改副本因子的功能也是通过重分配所使用的 kafka-reassign-partition.sh 脚本实现的</p><h1 id="如何选择合适的分区数"><a href="#如何选择合适的分区数" class="headerlink" title="如何选择合适的分区数"></a>如何选择合适的分区数</h1><h2 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h2><p>Kafka 本身提供的用于生产者性能测试 kafka-producer-perf-test.sh 和用于消费者性能测试的kafka-consumer-perf-test.sh</p><h2 id="分区数越多吞吐量就越高吗"><a href="#分区数越多吞吐量就越高吗" class="headerlink" title="分区数越多吞吐量就越高吗"></a>分区数越多吞吐量就越高吗</h2><p>对生产者而言，每一个分区的数据写入是完全可以并行<br>对消费者而言， Kafka 只允许单个分区中的消息被一个消费者线程消费， 一个消费组的消费并行度完全依赖于所消费的分区数</p><p>消息中间件的性能 般是指吞吐量（广义来说还包括延迟）。抛开硬件资源的影响，消息<br>写入的吞吐量还会受到消息大小、消息压缩方式、消息发送方式（同步 异步）、消息确认类型<br>acks、副本因子等参数影 响， 消息消费 吞吐量还会受到应用逻辑、处理速度的影响</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221106230140.png"><p>分区数为1时吞吐量最低，随着分区数的增长，相应的吞吐量跟着上涨。一旦分区数超过了某个阔值之后，整体的吞吐量是不升反降的。</p><img src="/2022/10/30/kafka-topic-and-partition/img-20221106230222.png"><p>随着分区数的增加，相应的吞吐量也会有所增长。一旦分区数超过了某个阈值之后，整体的吞吐量也是不升反降的</p><h2 id="分区数的上限"><a href="#分区数的上限" class="headerlink" title="分区数的上限"></a>分区数的上限</h2><p>一味的增加分区数并不能使吞吐量一直得到提升，并且分区数也并不能一直增加，如果超默认配置值，还会引起 Kafka 进程的崩溃</p><p>创建过多分区会有异常，最关键的信息是“Too many open flies ”，这是一种常见的 Linux 系统错误，通常意文件描述符不足，它一般发生在创建线程、创建 Socket 、打开文件这些场景下 Linux系统的默认设置下，这个 件描述符的个数不是很 ，通过 ulimit 命令可以查看。</p><p>ulimit 是在系统允许的情况下，提供对特定 shell 可利用的资源的控制。-H和-S选项指定资源的硬限制和软限制</p><h2 id="考量因素"><a href="#考量因素" class="headerlink" title="考量因素"></a>考量因素</h2><p>从吞吐方面考虑，增加合适的分区数可以在一定程度上提升整体吞吐量，但超过对应的阈值之后吞吐量不升反降。如果应用对吞吐量有一定程度上的要求 则建议在投入生产环境之前对同款硬件资源做一个完备的吞吐量相关的测试，以找到合适的分区数阈值区间。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka - 生产者消费者</title>
      <link href="/2022/10/16/kafka-producer-consumer/"/>
      <url>/2022/10/16/kafka-producer-consumer/</url>
      
        <content type="html"><![CDATA[<p>kafka角色：</p><ul><li>消息系统：Kafka和传统的消息系统都具备系统解耦性、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。Kafka还提供大多数消息系统难以实现的消息顺序性保障和回溯消费功能</li><li>存储系统：Kafka把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效地降低了数据丢失的风险。也正是得益于Kafka的消息持久化功能和多副本机制，我们可以吧Kafka作为长期对的数据存储系统来使用。</li><li>流式处理平台：Kafka不仅为每个流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理类库</li></ul><h1 id="初识Kafka"><a href="#初识Kafka" class="headerlink" title="初识Kafka"></a>初识Kafka</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>Producer：生产者，也就是发送消息的一方，生产者负责创建消息，然后将其投递到Kafka中</li><li>Consumer：消费者，也就是接收消息的一方。消费者连接到Kafka上并接收消息，进而进行相应的业务逻辑处理</li><li>Broker：服务代理结点：对于Kafka而言，Broker可以简单的看做一个独立的Kafka服务结点或Kafka服务实例。</li><li>主题：Kafka中的消息以主题为单位进行归类，生产者负责将消息发送到特定的主题，而消费者负责订阅主题并进行消费</li><li>分区：一个分区只属于单个主题，同一主题下不同分区包含的消息是不同的，分区在存储层面可以看做一个可追加的日志文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量。如果一个主题只对应一个文件，那么这个文件所在的机器IO将会成功这个主题的性能瓶颈，而通过增加分区的数量可以实现水平扩展。</li><li>Offset偏移量：offset是消息在分区中的唯一标识，Kafka通过它来保证消息在分区内的顺序性，不过offset并不跨越分区，Kafka保证分区有序而不是主题有序</li><li>副本因子：副本个数；通过增加副本数量可以提升容灾能力，leader副本负责处理读写请求，follower副本负责与leader副本消息同步。当leader副本出现故障时，从follower副本中重新选举leader副本对外提供服务。kafka通过多副本机制实现了故障的自动转移。</li><li>AR：分区内所有副本(assigned replicas)</li><li>ISR:所有与leader副本保持一定程度同步的副本(in-sync replicas)</li><li>OSR:与leader副本同步滞后过多的副本 (out-of-sync replicas)</li><li>HW:高水位：标识一个特定的offset，消费者只能拉取到这个offset之前的消息 (high watermark)</li><li>LEO: 标识当前日志文件中下一条待写入消息的offset (Log End Offset)</li></ul><p>新产生的消息会先写入leader副本，然后follower副本会发送拉取请求来拉取落后的消息来进行消息同步。<br>当同步完成后，消费者才可以消费这条消息(为了防止leader副本宕机造成消息丢失)<br>kafka的复制机制既不是完全的同步复制，也不是单纯的落后复制。同步复制要求所有能工作的follower副本都复制完，这条消息才会被确认为已成功提交，这种方式极大的影响了性能。而在异步复制方式下，follower副本异步的从leader副本中复制数据，数据只要被leader副本写入就认为已经成功提交。(在这种情况下，如果follower副本都还没有复制完而落后与leader副本，突然leader副本宕机，则会造成数据丢失)。</p><img src="/2022/10/16/kafka-producer-consumer/img-20221016191323.png"><h2 id="生产与消费"><a href="#生产与消费" class="headerlink" title="生产与消费"></a>生产与消费</h2><pre><code>./bin/kafka-topics.sh --zookeeper localhost:2181/kafka --create --topic topic-demo --replication-factor 3 --partitions 4./bin/kafka-topics.sh --zookeeper localhost:2181/kafka --describe --topic topic-demo ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic-demo</code></pre><p><code>zookeeper.connect</code>  zk集群服务地址<br><code>listeners</code> broker监听客户端连接的地址列表<br><code>broker.id</code> broker的唯一标识<br><code>log.dir</code> kafka日志文件存放的目录，默认/tmp/kafka-logs<br><code>log.dirs</code> 优先级高<br><code>message.max.bytes</code> broker所能接收消息的最大值</p><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><h2 id="生产者客户端开发"><a href="#生产者客户端开发" class="headerlink" title="生产者客户端开发"></a>生产者客户端开发</h2><p>步骤：</p><ol><li>配置生产者客户端参数及创建相应的生产者实例</li><li>构建待发送的消息</li><li>发送消息</li><li>关闭生产者实例</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Properties props <span class="token operator">=</span> <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    ProducerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"Hello, Kafka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消息对象ProducerRecord 并不是单纯意义上的消息，包含了多个属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String topic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer paitition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Headers headers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> V value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Long timestamp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bootstrap.servers</code> 指定生产者客户端连接kafka所需的broker地址清单<br><code>key.serializer</code> 序列化成字节数组<br><code>value.serializer</code></p><ul><li><p>KafkaProducer是线程安全的，可以在多个线程中共享单个KafkaProducer实例，也可以将KafkaProducer实例进行池化来供其他线程调用</p></li><li><p>构建ProducerRecord 对象，topic属性和value属性是必填，其他选填</p></li></ul><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>发送消息的三种模式<br>发后即忘：send方法不指定Callback，性能最高，可靠性最差</p><p>同步：send方法利用返回的Future对象，阻塞等待Kafka响应</p><p>异步：send方法，指定Callback回调函数</p><p>可重试异常和不可重试异常</p><p>对于可重试异常，如果配置了retries参数，那么只要在规定的重试次数内自行恢复，就不会抛出异常</p><p>对于不可重试的异常，则直接抛出异常，不进行重试</p><p>对于同一个分区而言，如果消息record1先与record2发送，那么KafkaProducer就可以保证对应的callback1先与callback2调用</p><h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><p>生产者需要使用序列化器将对象转换成字节数组，才能通过网络发送给Kafka，在对端消费者使用反序列化器把Kafka转换成相应的对象</p><p>序列化器实现了org.apache.kafka.common.serialization.Serializer接口</p><p>一般要实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span>configs<span class="token punctuation">,</span><span class="token keyword">boolean</span> isKey<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">serialize</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> T data<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用Avro、JSON、Thrift、Protobuf、Protostuff等通用工具来实现</p><h3 id="分区器"><a href="#分区器" class="headerlink" title="分区器"></a>分区器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object Value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span>Cluster cluster<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如果ProducerRecord中指定了partition字段，则不需要分区器，partition字段就是要发往的分区号</p></li><li><p>如果没有指定分区器，就需要分区器根据key字段来计算partition值。Kafka的默认分区器实现了 xx.Partitioner接口，接口中有partition方法和close方法<br>默认分区器会判断key不为null，则对key进行哈希，最终根据得到的哈希值来计算分区号，拥有相同key的消息会被写入同一个分区。如果key为null，那么消息会以轮询的方式发往主题内的某一个可用分区</p><p>自定义分区器也只需实现上述接口即可</p></li></ul><h3 id="生产者拦截器"><a href="#生产者拦截器" class="headerlink" title="生产者拦截器"></a>生产者拦截器</h3><p>消息发送前做一些过滤，修改等等</p><p>需要自定义实现ProducerInterceptor接口</p><p>KafkaProducer会在消息被应答之前或消息发送失败时调用拦截器的onAcknowledgement方法，优于用户设定的Callback之前执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ProducerRecord<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">onSend</span><span class="token punctuation">(</span>ProducerRecord<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以指定一个拦截链，KafkaProducer按照interceptor.classes参数配置的拦截器的顺序来一一执行（各个拦截器按逗号隔开）</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><img src="/2022/10/16/kafka-producer-consumer/producer-structure.jpg" title="生产者客户端整体架构"><p>生产者客户端有两个线程，主线程和Sender线程。主线程生产消息经过拦截器、序列化器、分区器缓存到消息累加器中，Sender线程从RecordAccumulator中获取消息并发往Kafka中</p><p><code>buffer.memory</code>： 指定RecordAccumulator缓存的大小</p><p><code>max.block.ms</code>：指定生产者发送太快，缓冲区满了，阻塞的最大时间</p><p>RecordAccumulator缓存的大小由buffer.memory配置；如果生产者发送消息的速度超过发送到服务器的速度，则会导致生产者空间不足，这时候producer的send方法调用要么被阻塞，要么抛出异常，这个取决于参数max.block.ms的设置。</p><p>RecordAccumulator为每个分区维护一个双端队列，队列内容为ProducerBatch，ProducerBatch为一个至多个ProducerRecord；可以使得生产者创建的消息组成一个批次，更为紧凑。</p><p>消息在网络上传输是以字节传输的，发送之前要创建内存区域。kafka生产者中，通过java.io.ByteBuffer实现消息内存创建和释放。RecordAccumulator内部还有一个BufferPool，实现ByteBuffer的复用。BufferPool只针对特定大小的ByteBuffer进行管理，这个大小由<code>batch.size</code>指定。</p><p><code>batch.size</code> 指定ByteBuffer的大小</p><p>ProducerBatch的大小和batch.size相关。当一条ProducerRecord消息到了RecordAccumulator，会先寻找与分区对应的双端队列(如果没有则新建)，再从尾部获取一个ProducerBatch，查看该ProducerBatch中是否还可以写入这个ProducerRecord，可以写入则写入，不可以写入则新建ProducerBatch。</p><p>新建ProducerBatch时，判断这条ProducerRecord消息大小是否超过batch.size没超过，则就以batch.size的大小新建ProducerBatch，这段内存还可以由ByterBuffer复用；如果超过了则以评估的大小新建ProducerBatch，这段内存不会被复用。</p><p>Sender从RecordAccumulator获取缓存的消息后，进一步将原本的<code>&lt;分区，Deque&lt;ProducerBatch&gt;&gt;</code> 转换为 <code>&lt;Node, List&lt;ProducerBatch&gt;&gt;</code>Node表示kafka集群的结点。生产者向具体的broker结点发消息。</p><p>Sender还会进一步封装为<code>&lt;Node, Request&gt;</code>才发往各个Node，请求在从Sender发往kafka之前会保存到InFlightRequests中，保存形式为<code>Map&lt;NodeId, Deque&lt;Request&gt;&gt;</code>主要作用是缓存了已经发出去，但是还没有收到响应的请求。</p><p>这里限制了每个连接最多缓存的请求数，由<code>max.in.flight.requests.per.connecttion</code>指定，默认为5</p><h3 id="元数据的更新"><a href="#元数据的更新" class="headerlink" title="元数据的更新"></a>元数据的更新</h3><p>Node中未确认的请求越多，则认为负载越大。</p><p>选择leastLoadedNode发送请求可以使它能尽快发出，避免网络拥塞等异常的影响。<br>leastLoadedNode，即所有Node中负载最小的。</p><p>leastLoadedNode还可以用于<strong>元数据请求</strong>、<strong>消费者组播协议的交互</strong></p><p>如果发送一个很简单的消息</p><pre><code>ProducerRecord&lt;string, string&gt; record = new ProducerRecord&lt;&gt;(topic, &quot;hello&quot;);</code></pre><p>这里只有主题和消息<br>KafkaProducer需要将消息追加到指定主题的某个分区的对应leader副本之前。需要知道分区数目，计算出目标分区，需要知道目标分区的leader副本所在broker结点的地址、端口信息。这些需要的信息都属于<strong>元数据信息</strong>。</p><p>bootstrap.servers参数只需要配置部分broker结点的地址，客户端可以发现其他broker结点的地址，这一过程属于元数据更新。</p><p>客户端没有元数据信息时，会先选出leastLoadedNode，然后向这个Node发送MetadataRequest请求来获取具体的元数据信息。这个更新操作由Sender线程发起，在创建完MetadataRequest后同样会存入inFlightRequests。元数据虽然由Sender线程负责更新，但是主线程也需要读取这些信息，这里数据同步通过synchronized 和 final关键字保障。</p><h3 id="重要的生产者参数"><a href="#重要的生产者参数" class="headerlink" title="重要的生产者参数"></a>重要的生产者参数</h3><p><code>acks</code>：指定分区中必须要有多少副本收到这条消息，之后生产者才会认为这条消息是成功写入的。</p><p>默认acks = 1</p><p>acks = 0 生产者发送消息之后不需要等待任何服务端响应</p><p><code>max.request.size</code> 客户端能发送消息的最大值</p><p>retries 和 retry.backoff.ms</p><p><code>retries</code>是生产者重试的次数</p><p><code>retry.backoff.ms</code> 两次重试之间的间隔，默认100ms</p><p><code>compression.type</code> 默认值为none，指定消息压缩</p><p><code>connections.max.idle.ms</code> 指定在多久之后关闭闲置的连接</p><p><code>linger.ms</code> 指定生产者发送ProducerBatch之前等待更多ProducerRecord加入的时间</p><p><code>receive.buffer.bytes</code> 设置Socket接收消息缓冲区大小  默认32kb</p><p><code>send.buffer.bytes</code> Socket发送消息缓冲区大小</p><p><code>request.timeout.ms</code> 配置Producer等待请求响应的最长时间，默认30000ms</p><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><h2 id="消费者与消费者组"><a href="#消费者与消费者组" class="headerlink" title="消费者与消费者组"></a>消费者与消费者组</h2><p>每个消费者都有一个对应的消费者组。当消息发布到主题后，只会被投递给订阅它的每个消费组中的一个消费者。</p><p>每个消费组消费全部分区的消息。</p><p>消费者与消费组这种模型又可以让整体的消费能力具备横向伸缩性，我们可以增加消费者的个数来提高整体的消费能力。对于分区数固定的情况，一直增加消费者，到消费者个数超过分区数，就会有消费者分配不到分区。</p><p>消息投递模式：<br>点对点模式：基于队列，消息生产者发送消息到队列，消费者从消息队列中接收消息。</p><p>发布订阅模式：定义了如何想一个内容节点发布和订阅消息，这个内容节点叫做主题，主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者从主题中订阅消息。主题使得消息的订阅者和发布者互相保持独立，不需要进行接触即可保证消息的传递，发布订阅模式在消息的一对多广播时采用。</p><p>kafka同时支持两种消息投递模式。</p><ul><li>如果所有的消费者隶属于一个消费者组，那么所有的消息都会被均衡的投递给每一个消费者，即每条消息只会被一个消费者处理，这相当于点对点。</li><li>如果所有的消费者隶属于不同的消费组，那么所有的消息都会被广播给所有的消费者，即每条消息都会被所有的消费者处理，相当于发布订阅模式应用。</li></ul><p>消费组是一个逻辑概念，每个消费者在消费前需要指定所属消费组的名称，由<code>group.id</code>指定。消费者是实际的应用实例，可以是一个线程，也可以是一个进程，同一个消费组的消费者既可以部署在同一机器上，也可以部署在不同机器上。</p><h2 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h2><ol><li>配置消费者客户端参数以及创建相应的消费者实例</li><li>订阅主题</li><li>拉取消息并消费</li><li>提交消费位移</li><li>关闭消费者实例</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerAnalysis</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String brokerList <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> brokerList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsmer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ConsumerRecrds<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="必要的参数配置"><a href="#必要的参数配置" class="headerlink" title="必要的参数配置"></a>必要的参数配置</h3><p><code>bootstrap.servers</code> 集群broker地址</p><p><code>group.id</code> 消费者组名称</p><p><code>key.deserializer</code>  反序列化</p><p><code>value.deserializer</code></p><p>参数众多，直接使用org.apache.kafka.clients.consumer.ConsumerConfig</p><p>每个参数在ConsumerConfig类中都有对应的名称</p><p>如ConsumerConfig.GROUP_ID_CONFIG</p><h3 id="订阅主题与分区"><a href="#订阅主题与分区" class="headerlink" title="订阅主题与分区"></a>订阅主题与分区</h3><p>一个消费者可以订阅一个或多个主题，subscribe的几个重载方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> topics<span class="token punctuation">,</span> ConsumerRebalanceListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> topics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Pattern pattern<span class="token punctuation">,</span> ConsumerRebalanceListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>Pattern pattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.集合方式，<code>subscribe(Collection&lt;String&gt; topics)</code>订阅了什么就消费什么主题的消息。</p><p>2.正则表达式，如果采用正则表达式的方式，在之后如果有人创建了新的主题，且主题名字与正则表达式匹配，那么这个消费者就可以消费到新添加的主题中的消息。<br>例 <code>cosumer.subscribe(Pattern.compile(&quot;topic.*&quot;))</code><br>参数类型<code>ConsumerRebalanceListener</code>，设置的是再均衡监听器</p><p>3.消费者还能直接订阅某些主题的特定分区</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：<code>public List&lt;PartitionInfo&gt; partitionsFor(String topic)</code></p><p>TopicPartition类表示分区</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TopicPartition</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> partition<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分区</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String topic<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主题</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果事先不知道主题中有多少分区，则使用partitionsFor()方法查询指定主题的元数据信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>PartitionInfo<span class="token operator">></span> <span class="token function">partitionsFor</span><span class="token punctuation">(</span>String topic<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PartitionInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String topic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paitition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Node leader<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> replicas<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//AR</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> inSyncReplicas<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ISR</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Node offlineReplicas<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OSR</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取消订阅</p><pre class="line-numbers language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有订阅任何主题或分区，那么继续执行消费程序会报异常IllegalStateException</p><p>订阅状态:<br>集合订阅  <code>AUTO_TOPICS</code><br>正则表达式订阅 <code>AUTO_PATTERN</code><br>指定分区订阅 <code>USER_ASSIGNED</code></p><p>通过subscribe()方法订阅主题具有消费者自动再均衡的功能，在多个消费者的情况下，可以根据分区分配策略来自动分配各个消费者与分区的关系。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化器也实现了Deserializer接口，这个接口有以下三个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isKey<span class="token punctuation">)</span><span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h3><p>消费模式：推模式和拉模式<br>推模式：服务端主动将消息推送给消费者<br>拉模式：消费者主动向服务端发起请求来拉取消息</p><p>poll方法定义:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConsumerRecords<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">final</span> Duration timeout<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>timeout参数用来控制poll方法的阻塞时间，在消费者的缓冲区里没有可用数据时会发生阻塞。</p><p>ConsumerRecord定义</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerRecord</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String topic<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> partition<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消息所属分区的偏移量</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> timestamp<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> TimestampType timestampType<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> serializedKeySize<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> serializedValueSize<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Headers headers<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消息的头部内容</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> K key<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> V value<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> Long checksum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// CRC32的校验值</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它提供了iterator方法来循环遍历消息集内部的消息</p><p><code>public Iterator&lt;ConsumerRecord&lt;K, V&gt;&gt; iterator()</code></p><p>它提供了获取消息集中指定分区消息的方法<br><code>public List&lt;ConsumerRecord&lt;K, V&gt;&gt; records(TopicPartition partition)</code></p><p>它还提供了按照主题维度来进行消费的方法<br><code>public Iterable&lt;ConsumerRecord&lt;K, V&gt;&gt; records(String topic)</code></p><h3 id="位移提交"><a href="#位移提交" class="headerlink" title="位移提交"></a>位移提交</h3><p>对于kafka中的分区而言，它的每条消息都有唯一的offset，用来表示消息在分区中对应的位置。<br>笔者对于消息在分区中的位置，这个offset称为‘偏移量’<br>对于消费者消费到的位移，这个offset称为‘消费位移’</p><p>在每次调用poll方法时，它返回的是还没有被消费过的消息集，要做到这一点就要记录上一次消费时的消费位移。<br>消费位移要持久化保存，这个消费位移存储在kafka内部主题 <code>_consumer_offsets</code>中。消费者在消费完消息后需要执行消费位移的提交。</p><p>当前消费到的位移x，即lastConsumedOffset；已经提交过的消费位移，即commited offset<br>需要提交的位移 x + 1，表示下条需要拉去的消息的位置，即position<br>position = commited offset = lastConsumedOffset + 1</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">position</span><span class="token punctuation">(</span>TopicPartition partition<span class="token punctuation">)</span><span class="token keyword">public</span> OffsetAndMetadata <span class="token function">committed</span><span class="token punctuation">(</span>TopicPartition partition<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>位移提交的时机需要把握，否则很容易引入消费混乱现象<br>例：x 上一次提交的消费位移，[x, x+8]本次poll到的消息<br>重复消费：<br>如果是消费完所有拉取到的消息之后才执行提交，那么当消费到中间x+5消费者发生异常重启，则会重复从x开始拉取消费</p><p> 消息丢失：<br>如果拉取到消息之后就进行了位移提交x+8，那么当消费到中间x+5消费者发生异常重启，则直接从x+8开始消费，发生了消息丢失</p><p>在kafka中默认的消费位移提交为自动提交，由参数<code>enable.auto.commit</code>配置；这个默认提交是定期提交，由参数<code>auto.commit.interval.ms</code>配置，自动位移提交的动作是在poll方法的逻辑里完成的。</p><p>自动提交消费位移也可能造成消费混乱现象：<br>重复消费：假设刚刚提交完消费位移，然后拉取一批消息进行消费，在下一次自动提交消费位移之前，消费者重启了，那么又得从上一次位移提交的地方重新开始消费。</p><p>消息丢失；假设拉取线程A不断拉取存入本地缓存，消费线程B从缓存中读取，当已经提交的消费位移大于消费线程B消费到的消息，且发生重启时，就会发生消息丢失。</p><p>手动提交方式：<br>同步提交：<br><code>public void commitSync</code><br><code>public void commitSync(final Map&lt;TopicOartition, OffsetAndMetadata&gt; offsets)</code></p><p>异步提交：<br><code>public void commitAsync</code><br><code>public void commitAsync(OffsetCommitCallback callback)</code><br><code>public void commitAsync(final Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, OffsetCommitCallback callback)</code></p><p>commitSync方法会根据poll方法拉取的最新位移来进行提交，只有没有发生不可恢复的错误，它就会阻塞消费者线程直至位移提交完成。</p><p>带参数的commitSync方法提供了offsets参数，用来提交指定分区的位移。</p><p>异步提交的方式在执行的时候消费者线程不会被阻塞，可能在提交消费位移的结果还未返回之前就开始了新一次的拉去操作。它提供的异步方法中支持指定回调函数，它会在位移提交完成后回调OffsetCommitCallback中的onComplete()方法。</p><p>异步提交的时候同样会发生失败，如果消费位移提交了x失败， 下一次提交了x+y成功了，而这里前一步的提交x重试成功，那么消费位移又变成了x，这里消费者重启就会发生重复消费。<br>要避免这个问题可以在位移提交失败需要重试的时候检查提交位移和前一个位移的大小，当发现小于前一个提交的位移大小，则说明有更大的位移已经提交了，可以不用本次重试。</p><h3 id="控制或关闭消费"><a href="#控制或关闭消费" class="headerlink" title="控制或关闭消费"></a>控制或关闭消费</h3><p>pause和resume来分别实现暂停某些分区在拉取操作时返回数据给客户端和恢复某些分区向客户端返回数据的操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以检查被暂停的分区集合<br><code>public Set&lt;TopicPartition&gt; paused()</code></p><p>kafka consumer提供了close方法来实现关闭</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Duration timeout<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一种方法没有timeout参数，并不意味着会无限制的等待，它内部设定了最长等待时间30s</p><h3 id="指定位移消费"><a href="#指定位移消费" class="headerlink" title="指定位移消费"></a>指定位移消费</h3><p>当一个新的消费组建立的时候，它根本没有可以查找的消费位移。或者消费组内的一个消费者订阅了一个新的主题，它也没有可以查找的消费位移。当_consumer_offsets主题中有关这个消费组的位移信息过期而被删除后，它没有可以查找的消费位移。</p><p><code>auto.offset.reset</code>参数配置当消费者查不到所记录的消费位移时，就会根据该配置来决定从何处开始消费<br>可配置的值：<br><code>latest</code> ：从分区末尾开始消费消息<br><code>earliest</code> ：从起始处开始消费消息<br><code>none</code> ： 不从末尾也不从开始处开始消费，报NoOffsetForPartitionException异常</p><p>seek方法提供了从特定位移处开始拉去消息的功能</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seek</span><span class="token punctuation">(</span>TopicPartition partition<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>seek方法只能重置消费者分配到的分区的消费位置，而分区的分配是在poll方法的调用过程中实现的，也就是说，在执行seek方法之前需要先执行一次poll方法。</p><pre class="line-numbers language-java"><code class="language-java">KafkaConsumer <span class="token operator">&lt;</span>String String<span class="token operator">></span> consumer<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> cosumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays <span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duratio <span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> Set<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> assignment <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">assignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>Top cPartition tp <span class="token operator">:</span> assignment<span class="token punctuation">)</span> <span class="token punctuation">{</span> consumer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>tp <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ConsumerRecords<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token function">DurationofMllis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//consume the record .</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们将代码清单 中第①行 poll （）方法的参数设置为 ，即这 行替换为<br><code>consumer poll(Duration.ofMillis(0)) ;</code></p><p>此之后， 会发现 seek（） 方法并未有任何作用。因为当 poll （）方法中 参数为0时，此方法立刻返回，那么 poll （） 方法内部进行分区分配的逻辑就会来不及实施。</p><p>如果对未分配到的分区执行 seek（） 方法 那么会报出IllegalStateException 的异常。类似在调用 subscrib （） 方法之后直接调用 seek（） 方法</p><pre class="line-numbers language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> consumer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会报出如下的异常<br>java.lang.I llegalStateException: No current assignment for partition topic- demo - 0</p><p>seek的几个方法定义</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Top cPartition Long<span class="token operator">></span> <span class="token function">endOffsets</span><span class="token punctuation">(</span> Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>TopicPartition <span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token function">endOffsets</span><span class="token punctuation">(</span> Collection<span class="token operator">&lt;</span>Top cPartit on<span class="token operator">></span> part tionsDuration timeout<span class="token punctuation">)</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>TopicPartition <span class="token punctuation">,</span> Long<span class="token operator">></span> beginningOff <span class="token function">sets</span> <span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>TopicPart tion Long<span class="token operator">></span> <span class="token function">beginningOffsets</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">,</span> Duration timeout<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seekToBeginning</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> seekToEnd Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>TopicPartition <span class="token punctuation">,</span> OffsetAndTimestamp<span class="token operator">></span> <span class="token function">offsetsForTimes</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> Long<span class="token operator">></span> timestampsToSearch<span class="token punctuation">)</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>TopicPartition OffsetAndTimestamp<span class="token operator">></span> <span class="token function">offsetsForTimes</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> Long<span class="token operator">></span> t imestampsToSearch<span class="token punctuation">,</span>Duration timeout <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再均衡"><a href="#再均衡" class="headerlink" title="再均衡"></a>再均衡</h3><p>再均衡是指分区的所属权从一个消费者转移到另一消费者的行为。在再均衡发生期间，消费组内的消费者是无法读取消息的。 就是说，在再均衡发生期间的这一小段时内，消费组会变得不可用 。</p><p>比如消费者消费完某个分区中的一部分消息时还没有来得及提交消费位移就发生了再均衡操作 之后这个分区又被分配给了消费组 的另一个消费者，原来被消费完的那部分消息又被重新消费一遍，也就是发生了重复消费。</p><p>再均衡监听器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">onPartitionsRevoked</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">onPartitionsAssigned</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> partitions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> currentOffsets <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerRebalanceListener</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPartitionsRevoked</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> part tions<span class="token punctuation">)</span> <span class="token punctuation">{</span> consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span>currentOffsets<span class="token punctuation">)</span> <span class="token punctuation">;</span> currentOffsets<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPartitionsAssigned</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>TopicPartition partitions<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//do nothing . </span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消费者拦截器"><a href="#消费者拦截器" class="headerlink" title="消费者拦截器"></a>消费者拦截器</h3><p>消费者拦截器需要自定义实现 org.apache.kafka.clients.consumer.Consumerlnterceptor 接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConsumerRecords<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">onConsume</span><span class="token punctuation">(</span>ConsumerRecords<span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V<span class="token operator">></span> records<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> offsets<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Kafkaconsumer 会在 poll （）方法返回之前调用拦截器的 Consume（） 方法来对消息进行相应<br>的定制 操作，KafkaConsumer 会在提交完消费位移之后调用拦截器的 onCommit（） 方法</p><p>在消费者中也有拦截链的概念，和生产者的拦截链一样， 也是按照工interceptor classes参数配置的拦截器的顺序来一一执行的（配置的时候，各个拦截器之间使用逗号隔开）。同样也要提防“副作用”的发生 如果在拦截链中某个拦截器执行失败，那么下一个拦截器会接着从上一个执行成功的拦截器继续执行。</p><h3 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h3><p>KatkaProducer 是线程安全的，然而 KafkaConsumer 却是非线程安全 KafkaConsumer定义了 acquire （） 方法，用来检测当前是否只有 个线程在操作，若有其他线程正在操作则会抛出 ConcurrentModifcationException 异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicLong currentThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Atom</span> <span class="token function">cLong</span><span class="token punctuation">(</span>NO CURRENT THREAD <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Kaf aConsumer 中的成员变量</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">long</span> threadid <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>threadid <span class="token operator">!=</span> currentThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>currentThread<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>NO_CURRENT THREAD<span class="token punctuation">,</span> threadid<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span> <span class="token punctuation">(</span><span class="token string">"KafkaConsumer is not safe for multi- threaded access "</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> refcount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>acquire（）方法和 release （）方法成对出现，表示相应的加锁和解锁操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>refcount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    currentThread<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>NO CURRENT THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>多线程的目的就是为了提高整体的消费能力。多线程的实现方式有多种，第一种也是最常见的方式 线程封闭，即为每个线程实例化一个 KafkaConsumer 对象。</p><img src="/2022/10/16/kafka-producer-consumer/img-20221030190716.png"><p>一个消费线程可消费一个或多个分区中的消息，所有的消费线程都隶属于同一个消费组。这种实现方式的并发度受限于分区的实际个数，当消费线程的个数大于分区数时 就有部分消费线程一直处于空闲的状态。</p><p>多个消费线程同时消费同一个分区 ，这个通过 assign（）、 seek （）等方法实现，这样可以打破原有的消费线程的个数不能超过分区数的限制，进一步提高了消费的能力 。不过这种实现方式对于位移提交和顺序控制的处理就会变得非常复杂，</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Properties props <span class="token operator">=</span> <span class="token function">itConfig</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> consumerThreadNum <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>O<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>consumerThreadNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">KafkaConsumerThread</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>topic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> KafkaConsumer<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> String<span class="token operator">></span> kafkaConsumer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">KafkaConsumerThread</span><span class="token punctuation">(</span>Properties props<span class="token punctuation">,</span> String topic<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaConsumer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays <span class="token function">asList</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span>         kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span> <span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMill</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Stri g<span class="token operator">></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 处理消息模块 ① </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         kafkaConsumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种多线程的实现方式和开启多个消费进程的方式没有本质上的区别， 优点是每个线程可以按顺序消费各个分区中的消息。缺点也很明显，每个消费线程都要维护一个独立的TCP 连接 如果分区数和 consumerThreadNum 的值都很大，那么会造成不 的系统开销。</p><p>这里的处理速度取决于处理消息模块，。一般 言， poll（）拉取消息的速度是相当快的 ，而整体消费的瓶颈是在处理消息这一块， 通过－定的方式来改进这一部分，那么就能带动整体消费性能提升。</p><img src="/2022/10/16/kafka-producer-consumer/img-20221030193459.png"><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span>         kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMill</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>records<span class="token punctuation">.</span><span class="token function">isEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>             executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecordsHandler</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用各个hander处理消息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         kafkaConsumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RecordsHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">final</span> ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records<span class="token punctuation">;</span>    <span class="token keyword">public</span> RecordsHandl <span class="token function">er</span> <span class="token punctuation">(</span>ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records<span class="token punctuation">)</span> <span class="token punctuation">(</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>records <span class="token operator">=</span>records<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理records</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RecordHandler 类是用来处理消息的，而 KafraConsumerThread 类对应的是一个消费线程，里面通过线程池的方式来调用 RecordHandler 处理一批批的消息。</p><p>引入一个共享<br>变量 offsets 来参与提交</p><img src="/2022/10/16/kafka-producer-consumer/img-20221030200350.png"><p>每一个处理消息的 RecordHandler 类在处理完消息之后都将对应的消费位移保存到共享变量offsets 中， KafraConsumerThread 在每一次 poll （）方法之后都读取 offsets 中的内容并对其进行位移提交。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>TopicPartition tp <span class="token operator">:</span> records <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> String<span class="token operator">></span> tpRecords <span class="token operator">=</span> records <span class="token punctuation">.</span> <span class="token function">records</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 处 tpRec ords</span>    <span class="token keyword">long</span> lastConsumedOffset <span class="token operator">=</span> tpRecords <span class="token punctuation">.</span> <span class="token function">get</span> <span class="token punctuation">(</span>tpRecords<span class="token punctuation">.</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> offsets<span class="token punctuation">.</span>co ta 工口 <span class="token function">sKey</span> <span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             offsets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">(</span>lastConsumedOffset <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">long</span> position <span class="token operator">=</span> offsets <span class="token punctuation">.</span> <span class="token function">get</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> lastConsumedOffset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             offsets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">(</span>lastConsumedOffset <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>offsets<span class="token punctuation">.</span> <span class="token function">isEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>     kafkaConsumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span>offsets<span class="token punctuation">)</span><span class="token punctuation">;</span>     offsets<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设一个处理线程 RecordHand erl 正在处理 offset 99消息，而另一个处理线程 RecordHand er2 己经处理完了 offset 100 99 的消息并进行了位移提交，此时如果 RecordHandler 发生异常，则之后的消费只能从 200 开始而无法再次消费 99的消息，从而造成了消息丢失的现象。这里虽然针对位移覆盖做了一定的处理，但还没有解决异常情况下的位移覆盖问题。</p><p>通过消费者拉取分批次的消息，然后提交给多线程进行处理，而这里的滑动窗口式的实现方式是将拉取到的消息暂存起来， 多个消费线程可以拉取暂存的消息，这个用于暂存消息的缓存大小即为滑动窗口的大小， 总体上而言没有太多的变化 不同的是对于消费位移的把控。</p><img src="/2022/10/16/kafka-producer-consumer/img-20221030201350.png"><p>startOffset标注的是当前滑动 口的起始位置 endOffset 注的是末尾位置。每当 startOffset 指向的方格中的消息被消 费完成，就可以提交这部分的位移，与此同时，窗 口向 前滑动一格， 除原来startOffset 所指方格中对应的消息 并且拉取新的消息进入窗口。</p><p>滑动窗口的大小固定，所对应的用来暂 消息的缓存大小也就固定了，这部分内存开销可控。方格大小和滑动窗口的大小同决定了消费线程的并发数。</p><p>如果 个方格内的消 息无法被标记为消费完成，那么就会造成 startOffset 悬停。为了使窗口能够继续向前滑动 那么就需要设定 个闹值，当 startOffset 悬停一定的时间后就对这部分消息进行本地重试消费，如果重试失败就转入重试队列，如果还不奏效就转入死信队列。</p><h3 id="重要的消费者参数"><a href="#重要的消费者参数" class="headerlink" title="重要的消费者参数"></a>重要的消费者参数</h3><p><code>fetch.min.bytes</code>：Consumer 在一次拉取请求（调用 poll （） 方法）中能从 Kafka 中拉取的最小<br>数据量，默认值为 1B。</p><p><code>fetch .max.bytes</code>：配置 Consumer 在一次拉取请求中从 Kafka中拉取的最大数据 ，默认值为 52428800 ，也就是 50MB</p><p><code>fetch.max.wait.ms</code>：于指定 Kafka 的等待时间，默认值为 500ms</p><p><code>max.partition.fetch.bytes</code>：配置从每个分区里返回给 Consumer的最大数据 ，默认值为 1048576 (B)</p><p><code>max.poll.records</code>：配置 Consumer 次拉取请求中拉取的最大消息数，默认值为 500 （条）</p><p><code>connections.max.idle.ms</code>：指定在多久之后关闭限制的连接，默认值是 540000 (ms ），即 分钟。</p><p><code>exclude.internal.topics</code>：Kafka 中有两个内部的主题：_consumer_offsets 和 _transaction_state。 exclude.internal.topics用来指定 Kafka 中的内部主题是否可以向消费者公开，默认值为 true 。</p><p><code>receive.buffer.bytes</code>：这个参数用来设置 Socket 接收消息缓冲区的大小，默认值为 65536 (B)</p><p><code>send.buffer.bytes</code>：设置 Socket 发送消息缓冲区的大小，默认13 1072 (B)</p><p><code>request.timeout.ms</code>：来配置 Consumer 等待请求响应的最长时间，默认值为 30000ms</p><p><code>metadata.max.age.ms</code>：用来配置元数据的过期时间，默认值为 300000 ms</p><p><code>reconnect.backoff.ms</code>：配置尝试重新连接指定主机之前的等待时间，默认值为50ms</p><p><code>retry.backo ms</code>：配置尝试重新发送失败的请求到指定的主题分区之前的等待（退避〉时间，</p><p><code>isolation.level</code>：配置消费者的事务隔离级别。有效值为“read uncommitted ，，和<br>“ read committed ＂</p><img src="/2022/10/16/kafka-producer-consumer/img-20221030202942.png"><img src="/2022/10/16/kafka-producer-consumer/img-20221030202957.png"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析ovn LS流表设计</title>
      <link href="/2022/09/27/ovn-ls-pipeline/"/>
      <url>/2022/09/27/ovn-ls-pipeline/</url>
      
        <content type="html"><![CDATA[<p>OVN通过引入逻辑交换机(Logical Switch)、逻辑交换机端口(Logical Switch Port)来组成虚拟网络拓扑。</p><p>二层包含的拓扑主要是同主机和跨主机两种。用户在页面通过lsp将虚拟机连接到同一个ls；其对应数据面，则是虚拟机的网口通过ovs port连接到ovs，每个主机上的ovs为其提供了虚拟网络功能。</p><pre><code>(host1)vm1 - lsp1 - ls1(host1)vm2 - lsp2 -(host2)vm3 - lsp3 -</code></pre><p><strong>参考：</strong><br><a href="https://www.ovn.org/support/dist-docs/ovn-architecture.7.pdf" target="_blank" rel="noopener">https://www.ovn.org/support/dist-docs/ovn-architecture.7.pdf</a><br><a href="https://www.cnblogs.com/laolieren/p/ovn-architecture.html" target="_blank" rel="noopener">https://www.cnblogs.com/laolieren/p/ovn-architecture.html</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OVN </tag>
            
            <tag> LS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ovs port vlan处理研究</title>
      <link href="/2022/07/05/ovs-port-vlan/"/>
      <url>/2022/07/05/ovs-port-vlan/</url>
      
        <content type="html"><![CDATA[<h2 id="vlan-模式"><a href="#vlan-模式" class="headerlink" title="vlan 模式"></a>vlan 模式</h2><p>access、trunk、native-tagged、native-untagged</p><h3 id="收发包行为"><a href="#收发包行为" class="headerlink" title="收发包行为"></a>收发包行为</h3><p>vlanid为0和没有vlan tag一样的处理。<br>native-tagged端口和native-untagged端口的native vlan即为port的tag值</p>  <blockquote class="pullquote mindmap mindmap-md"><ul><li>OVS vlan属性收发包<ul><li>access<ul><li>收<ul><li>没有vlan tag，接收，并打上端口vlan(tag=0不生效)</li><li>有vlan tag且vlanid非0，丢弃</li></ul></li><li>发<ul><li>发出去的报文不带vlan</li></ul></li></ul></li><li>trunk<ul><li>收<ul><li>trunk为空收：<ul><li>报文带vlan，允许进入</li><li>报文不带vlan，允许进入</li></ul></li><li>trunk不为空收<ul><li>报文带vlan tag，vlan id是否在允许之列，收</li><li>报文不带vlan tag，丢弃</li></ul></li></ul></li><li>发<ul><li>带着原始vlan发出</li></ul></li></ul></li><li>native-tagged<ul><li>收<ul><li>报文带vlan tag，vlan id是否在允许之列，收</li><li>报文不带vlan tag，接收，并打上端口的native vlan</li></ul></li><li>发<ul><li>带着原始vlan发出</li></ul></li></ul></li><li>native-untagged<ul><li>收<ul><li>报文带vlan tag，vlan id是否在允许之列，收</li><li>报文不带vlan tag，接收，并打上端口的native vlan</li></ul></li><li>发<ul><li>vid == native vlan，不带vlan，发出</li><li>vid != native vlan，带原始vlan发出</li></ul></li></ul></li></ul></li></ul></blockquote><p>当端口vlan_mode为native-tagged或native-untagged时，native vlan也在其对应的广播域中</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="创建两个vm"><a href="#创建两个vm" class="headerlink" title="创建两个vm"></a>创建两个vm</h3><pre><code>ip netns add vm1ip link add vm1-vif type veth peer name vm1ip link set vm1 netns vm1ip netns exec vm1 ip link set vm1 address 00:00:00:00:00:03ip netns exec vm1 ip addr add 10.10.10.2/24 dev vm1ip netns exec vm1 ip link set vm1 upip link set vm1-vif upip netns add vm2ip link add vm2-vif type veth peer name vm2ip link set vm2 netns vm2ip netns exec vm2 ip link set vm2 address 00:00:00:00:00:04ip netns exec vm2 ip addr add 10.10.10.3/24 dev vm2ip netns exec vm2 ip link set vm2 upip link set vm2-vif up</code></pre><h3 id="连接vm网卡和网桥"><a href="#连接vm网卡和网桥" class="headerlink" title="连接vm网卡和网桥"></a>连接vm网卡和网桥</h3><pre><code>ovs-vsctl add-br -br-intovs-vsctl add-port br-int vm1-vifovs-vsctl add-port br-int vm2-vif</code></pre><p>效果如图</p><img src="/2022/07/05/ovs-port-vlan/img-20220705225523.png"><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h4><p>tcpdump和ovs-tcpdump工具可以抓到一路上OVS对vlan的处理。</p><p>如果使用ovs-tcpdump，ovs-tcpdump在守护程序中创建交换机镜像端口，并执行以侦听这些端口。当实例退出时，它会清理它创建的镜像端口。</p><p>如果用系统tcpdump抓包，抓的是经过vm网卡veth pair的流量。</p><p>抓包点如下</p><pre><code>vm1-eth0-(tcpdump)vm1-vif(ovs-tcpdump)-OVS Bridge-vm2-vif-vm2-eth0</code></pre><h3 id="access模式"><a href="#access模式" class="headerlink" title="access模式"></a>access模式</h3><p>收包：收包不带vlan/vlan为0，则打上tag，带vlan，则丢弃<br>发包：只会发vlan为端口vlan的包，发包不带vlan</p><h4 id="tag-0"><a href="#tag-0" class="headerlink" title="tag=0"></a>tag=0</h4><p>tag=0时不生效，抓到的包并没有打上vlanid为0的tag(处理收包时也类似，vlan_id为0则表示当作没有vlan处理)</p><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=accessovs-vsctl set Port vm2-vif vlan_mode=accessovs-vsctl set Port vm1-vif tag=0ovs-vsctl set Port vm2-vif tag=0</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220707221449.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的包，vm1-vif port access tag=0处理后还是不带vlan<img src="/2022/07/05/ovs-port-vlan/img-20220707222722.png"><img src="/2022/07/05/ovs-port-vlan/img-20220707222806.png"></li></ul><p><strong>收包 带vlan 0</strong></p><ul><li>vm1发出带vlan0的包, vm1-vif处理后不带vlan<img src="/2022/07/05/ovs-port-vlan/img-20220711222809.png"></li></ul><p><strong>收包 带vlan 11</strong></p><ul><li>vm1 发出带vlan 11的包，vm1-vif port access tag=0处理后丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220711222511.png"><img src="/2022/07/05/ovs-port-vlan/img-20220711222607.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm2-vif通过不带vlan的包，以不带vlan转发<img src="/2022/07/05/ovs-port-vlan/img-20220711223215.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 11</strong></p><ul><li>设置vm1-vif access模式tag为11，，vm2-vif access模式保持tag=0</li><li>带vlan 11的数据包不会被转发到vm2-vif口<img src="/2022/07/05/ovs-port-vlan/img-20220713200925.png"></li></ul><h4 id="tag-0-1"><a href="#tag-0-1" class="headerlink" title="tag!=0"></a>tag!=0</h4><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=accessovs-vsctl set Port vm2-vif vlan_mode=accessovs-vsctl set Port vm1-vif tag=10ovs-vsctl set Port vm2-vif tag=10</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220707222905.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的包，vm1-vif port access tag=10处理后，带上vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220707223104.png"></li></ul><p><strong>收包 带vlan 0</strong><br>设置linux 子接口</p><pre><code>ip netns exec vm1 vconfig add vm1 0ip netns exec vm1 ifconfig vm1 0.0.0.0ip netns exec vm1 ifconfig vm1.0 10.10.10.2</code></pre><ul><li>vm1 发出vlan 0的数据包，vm1-vif port access 处理后，带上vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220710224012.png"><img src="/2022/07/05/ovs-port-vlan/img-20220710224207.png"></li></ul><p><strong>收包带vlan 10</strong><br>设置linux 子接口</p><pre><code>ip netns exec vm1 vconfig add vm1 10ip netns exec vm1 ifconfig vm1 0.0.0.0ip netns exec vm1 ifconfig vm1.10 10.10.10.2</code></pre><ul><li>vm1发出带vlan 10的包，vm1-vif port access 处理后，被丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220710223431.png"><img src="/2022/07/05/ovs-port-vlan/img-20220710223519.png"></li></ul><p><strong>收包 带vlan11</strong></p><pre><code>ip netns exec vm1 vconfig add vm1 11ip netns exec vm1 ifconfig vm1 0.0.0.0ip netns exec vm1 ifconfig vm1.11 10.10.10.2</code></pre><ul><li>vm1发出带vlan 11的数据包，vm1-vif port处理后，被丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220713201315.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm1-vif设置trunk模式且trunks为空，vm2-vif设置access模式tag=10，vm1-vif接收不带vlan的包后没有被转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713201940.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>vm1-vif设置access模式tag=10，vm2-vif设置access模式tag=10</li><li>vm1-vif port将vlan 10的数据包转发到vm2-vif，vm2-vif处理后以不带vlan转发<img src="/2022/07/05/ovs-port-vlan/img-20220713203016.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>vm1-vif设置access模式tag=11， vm2-vif设置access模式tag=10</li><li>vm1-vif port收到vlan 11的数据包后没有转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713203212.png"></li></ul><h3 id="trunk模式"><a href="#trunk模式" class="headerlink" title="trunk模式"></a>trunk模式</h3><p>trunks为空<br>收包：收包不带vlan或者带vlan或者vlanid为0(进入后不带vlan)，允许进入<br>发包：带着原始vlan转发<br>trunks不为空<br>收包：带vlan且在vlan_range中，才允许进入<br>发包：在vlan_range中，会带着原始vlan转发</p><h5 id="trunks为空"><a href="#trunks为空" class="headerlink" title="trunks为空"></a>trunks为空</h5><p>在不配置vlan时，ovs port默认是trunk all的，可以抓包看到对应的数据包没有带vlan，也都被允许通过了。</p><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=trunkovs-vsctl set Port vm2-vif vlan_mode=trunkovs-vsctl set Port vm1-vif trunks=[]ovs-vsctl set Port vm2-vif trunks=[]</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713213515.png"><p><strong>收到不带vlan的包</strong></p><ul><li>vm1发出不带vlan的数据包，vm1-vif处理后继续不带vlan<img src="/2022/07/05/ovs-port-vlan/img-20220713203933.png"></li></ul><p><strong>收到带vlan 0的包</strong></p><ul><li>vm1 发出带vlan 0的包，vm1-vif处理后不带vlan，且允许通过。<img src="/2022/07/05/ovs-port-vlan/img-20220710225805.png"><img src="/2022/07/05/ovs-port-vlan/img-20220710225731.png"></li></ul><p><strong>收到带vlan 10的包</strong></p><ul><li>vm1发出带vlan 10的包，vm1-vif 处理后带着原vlan转发，<img src="/2022/07/05/ovs-port-vlan/img-20220710230349.png"><img src="/2022/07/05/ovs-port-vlan/img-20220713204049.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm1-vif转发不带vlan的包到vm2-vif</li><li>vm2-vif继续以不带vlan转发vm2<img src="/2022/07/05/ovs-port-vlan/img-20220713204432.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>设置vm1-vif 为access模式tag=10</li><li>vm1-vif收到vlan 10的数据包转发到vm2-vif， vm2-vif以原vlan转发到vm2<img src="/2022/07/05/ovs-port-vlan/img-20220713204647.png"></li></ul><h5 id="trunks不为空"><a href="#trunks不为空" class="headerlink" title="trunks不为空"></a>trunks不为空</h5><p>在配置vlan后，ovs port只能收在trunk范围的包</p><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=trunkovs-vsctl set Port vm1-vif vlan_mode=trunkovs-vsctl set Port vm1-vif trunks=[10]ovs-vsctl set Port vm2-vif trunks=[10]</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713213553.png"><p><strong>收到不带vlan的包</strong></p><ul><li>vm1 发出不带vlan的包，vm1-vif处理后，被丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220710231215.png"></li></ul><p><strong>收到带vlan 0的包</strong></p><ul><li>vm1 发出带vlan 0的包，vm1-vif处理后不在允许范围内被丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220710231542.png"></li></ul><p><strong>收到带vlan 10的包</strong></p><ul><li>vm1 发出带vlan10的包，vm1-vif处理后允许通过，vm2-vif允许通过，vm2收到带vlan10的包后丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220710231015.png"></li></ul><p><strong>收到带vlan 11的包</strong></p><ul><li>vm1 发出带vlan 0的包，vm1-vif处理后不在允许范围内被丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220710231738.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>设置vm1-vif trunk模式，trunks=[]</li><li>vm1-vif处理不带vlan的数据包不会转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713205845.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>设置vm1-vif access模式，tag=10</li><li>vm1-vif处理vlan 10的数据包转发到vm2-vif，vm2-vif以vlan 10转发<img src="/2022/07/05/ovs-port-vlan/img-20220713210045.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>设置vm1-vif access模式，tag=10</li><li>vm1-vif处理vlan 11的数据包不会转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713210138.png"></li></ul><h3 id="native-tagged模式"><a href="#native-tagged模式" class="headerlink" title="native-tagged模式"></a>native-tagged模式</h3><p>native-vlan设置即tag列<br>收包：报文不带vlan，则打上native vlan进入，报文带vlan且在允许之列，则进入<br>发包：带着原始vlan发出</p><h4 id="native-vlan和trunks重合"><a href="#native-vlan和trunks重合" class="headerlink" title="native vlan和trunks重合"></a>native vlan和trunks重合</h4><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=native-taggedovs-vsctl set Port vm2-vif vlan_mode=native-taggedovs-vsctl set Port vm1-vif trunks=[10]ovs-vsctl set Port vm1-vif tag=10ovs-vsctl set Port vm2-vif trunks=[10]ovs-vsctl set Port vm2-vif tag=10</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713213626.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的数据包，vm1-vif处理后带上native vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220713211909.png"></li></ul><p><strong>收包 带vlan 0</strong></p><ul><li>vm1发出带vlan 0的数据包，vm1-vif处理后带上native vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220713212047.png"></li></ul><p><strong>收包 带vlan 10</strong></p><ul><li>vm1发出带vlan 10的数据包，vm1-vif允许带着原始vlan进入<img src="/2022/07/05/ovs-port-vlan/img-20220713212213.png"></li></ul><p><strong>收包 带vlan 11</strong></p><ul><li>vm1 发出带vlan 11的数据包，不在允许之列，vm1-vif丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220713212418.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm1-vif设置trunk模式，trunks=[]</li><li>vm1-vif收到不带vlan的数据包后没有向vm2-vif转发<img src="/2022/07/05/ovs-port-vlan/img-20220713212741.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>设置vm1-vif access模式，tag=10</li><li>vm1-vif收到vlan 10的数据包转发到vm2-vif，vm2-vif处理后以原始vlan转发<img src="/2022/07/05/ovs-port-vlan/img-20220713212843.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>设置vm1-vif access模式，tag=11</li><li>vm1-vif收到vlan 11的数据包没有转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713213027.png"></li></ul><h4 id="native-vlan和trunks不重合"><a href="#native-vlan和trunks不重合" class="headerlink" title="native vlan和trunks不重合"></a>native vlan和trunks不重合</h4><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=native-taggedovs-vsctl set Port vm2-vif vlan_mode=native-taggedovs-vsctl set Port vm1-vif trunks=[10]ovs-vsctl set Port vm1-vif tag=11ovs-vsctl set Port vm2-vif trunks=[10]ovs-vsctl set Port vm2-vif tag=11</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713213656.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的数据包，vm1-vif处理后带vlan 11<img src="/2022/07/05/ovs-port-vlan/img-20220713213800.png"></li></ul><p><strong>收包 带vlan 0</strong></p><ul><li>vm1发出带vlan 0的数据包，vm1-vif处理后带vlan 11<img src="/2022/07/05/ovs-port-vlan/img-20220713213923.png"></li></ul><p><strong>收包 带vlan 10</strong></p><ul><li>vm1 发出带vlan 10的数据包，vm1-vif处理后带着原始vlan进入<img src="/2022/07/05/ovs-port-vlan/img-20220713214019.png"></li></ul><p><strong>收包 带vlan 11</strong></p><ul><li>vm1 发出带vlan 11的数据包，vm1-vif处理后带着原始vlan进入<img src="/2022/07/05/ovs-port-vlan/img-20220713214125.png"></li></ul><p><strong>发包 带vlan 12</strong></p><ul><li>vm1 发出带vlan 12的数据包，vm1-vif处理不在允许之列丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220713214218.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm1设置trunk模式，trunks=[]</li><li>vm1收到不带vlan的数据包，没有向vm2-vif转发<img src="/2022/07/05/ovs-port-vlan/img-20220713214451.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>vm1设置access模式，tag=10</li><li>vm1-vif 收到带vlan 10的数据包，转发到vm2-vif，vm2-vif以原始vlan转发<img src="/2022/07/05/ovs-port-vlan/img-20220713214701.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>vm1设置access模式，tag=11</li><li>vm1-vif收到带vlan 11的数据包，转发到vm2-vif，vm2-vif以原始vlan转发<img src="/2022/07/05/ovs-port-vlan/img-20220713214834.png"></li></ul><p><strong>发包 带vlan 12</strong></p><ul><li>vm1设置access模式，tag=12</li><li>vm1-vif收到带vlan 12的数据包，没有转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713214945.png"></li></ul><h3 id="native-untagged模式"><a href="#native-untagged模式" class="headerlink" title="native-untagged模式"></a>native-untagged模式</h3><p>native vlan即tag列<br>收包：收包不带vlan，则打上native vlan进入，收包带vlan且在允许之列，则进入<br>发包：发包和native vlan相同，则去掉vlan转发，否则带着原始vlan转发</p><h4 id="native-vlan和trunks重合-1"><a href="#native-vlan和trunks重合-1" class="headerlink" title="native vlan和trunks重合"></a>native vlan和trunks重合</h4><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=native-untaggedovs-vsctl set Port vm2-vif vlan_mode=native-untaggedovs-vsctl set Port vm1-vif trunks=[10]ovs-vsctl set Port vm1-vif tag=10ovs-vsctl set Port vm2-vif trunks=[10]ovs-vsctl set Port vm2-vif tag=10</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713215316.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的数据包，vm1-vif处理后带vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220713215402.png"></li></ul><p><strong>收包 带vlan 0</strong></p><ul><li>vm1发出带vlan 0的数据包，vm1-vif处理后带vlan 10<img src="/2022/07/05/ovs-port-vlan/img-20220713215454.png"></li></ul><p><strong>收包 带vlan 10</strong></p><ul><li>vm1 发出带vlan 10的数据包，vm1-vif处理后带原始vlan 进入<img src="/2022/07/05/ovs-port-vlan/img-20220713215625.png"></li></ul><p><strong>收包 带vlan 11</strong></p><ul><li>vm1 发出带vlan 11的数据包，vm1-vif处理后不在允许之列，丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220713215748.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>设置vm1-vif trunk模式，trunks=[]</li><li>vm1-vif收到不带vlan的数据包后不会转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713220011.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>设置vm1-vif access模式，tag=10</li><li>vm1-vif收到带vlan 10的数据包转发到vm2-vif,vm2-vif处理后去掉vlan转发到vm2<img src="/2022/07/05/ovs-port-vlan/img-20220713220151.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>设置vm1-vif access模式，tag=11</li><li>vm1-vif收到带vlan 11的数据包不会转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713220356.png"></li></ul><h4 id="native-vlan和trunks不重合-1"><a href="#native-vlan和trunks不重合-1" class="headerlink" title="native vlan和trunks不重合"></a>native vlan和trunks不重合</h4><pre><code>ovs-vsctl set Port vm1-vif vlan_mode=native-untaggedovs-vsctl set Port vm2-vif vlan_mode=native-untaggedovs-vsctl set Port vm1-vif trunks=[10]ovs-vsctl set Port vm1-vif tag=11ovs-vsctl set Port vm2-vif trunks=[10]ovs-vsctl set Port vm2-vif tag=11</code></pre><img src="/2022/07/05/ovs-port-vlan/img-20220713220442.png"><p><strong>收包 不带vlan</strong></p><ul><li>vm1发出不带vlan的数据包，vm1-vif处理后打上vlan 11<img src="/2022/07/05/ovs-port-vlan/img-20220713220628.png"></li></ul><p><strong>收包 带vlan 0</strong></p><ul><li>vm1发出带vlan 0的数据包，vm1-vif处理后打上vlan 11<img src="/2022/07/05/ovs-port-vlan/img-20220713220741.png"></li></ul><p><strong>收包 带vlan 10</strong></p><ul><li>vm1发出带vlan 10的数据包，vm1-vif处理后带着原始vlan 进入<img src="/2022/07/05/ovs-port-vlan/img-20220713220829.png"></li></ul><p><strong>收包 带vlan 11</strong></p><ul><li>vm1发出带vlan 11的数据包，vm1-vif处理后带着原始vlan 进入<img src="/2022/07/05/ovs-port-vlan/img-20220713220933.png"></li></ul><p><strong>发包 带vlan 12</strong></p><ul><li>vm1发出带vlan 11的数据包，vm1-vif处理后不在允许范围内丢弃<img src="/2022/07/05/ovs-port-vlan/img-20220713221021.png"></li></ul><p><strong>发包 不带vlan</strong></p><ul><li>vm1-vif设置trunk模式 trunks=0</li><li>vm1-vif收到不带vlan的数据包，不会向vm2-vif转发<img src="/2022/07/05/ovs-port-vlan/img-20220713221252.png"></li></ul><p><strong>发包 带vlan 0</strong><br>带vlan 0的数据包无法进入</p><p><strong>发包 带vlan 10</strong></p><ul><li>vm1-vif设置access模式 tag=10</li><li>vm1-vif收到带vlan 10的数据包转发到vm2-vif，vm2-vif处理后带着原始vlan转发到vm2<img src="/2022/07/05/ovs-port-vlan/img-20220713221436.png"></li></ul><p><strong>发包 带vlan 11</strong></p><ul><li>vm1-vif设置access模式 tag=11</li><li>vm1-vif收到带vlan 11的数据包转发到vm2-vif，vm2-vif处理后去掉vlan转发到vm2<img src="/2022/07/05/ovs-port-vlan/img-20220713221610.png"></li></ul><p><strong>发包 带vlan 12</strong></p><ul><li>vm1-vif设置access模式 tag=12</li><li>vm1-vif收到带vlan 12的数据包不会转发到vm2-vif<img src="/2022/07/05/ovs-port-vlan/img-20220713221726.png"></li></ul><p><strong>参考：</strong><br>思维导插件<code>npm install hexo-simple-mindmap</code><br>ovs-tcpdump <code>https://docs.openvswitch.org/en/latest/ref/ovs-tcpdump.8/</code></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> NetWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OVS </tag>
            
            <tag> VLAN </tag>
            
            <tag> ACCESS </tag>
            
            <tag> TRUNK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-11 安装linux子系统并使用</title>
      <link href="/2022/06/25/win11-wsl/"/>
      <url>/2022/06/25/win11-wsl/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview" target="_blank" rel="noopener">https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview</a></p><h1 id="确认环境"><a href="#确认环境" class="headerlink" title="确认环境"></a>确认环境</h1><ul><li>确认操作系统版本<br>windows搜索 关于你的电脑 -&gt; 操作系统版本<br>操作系统版本需要大于22000</li></ul><img src="/2022/06/25/win11-wsl/img-20220625215308.png"><ul><li>确认开启虚拟化功能<br>windows搜索 windows功能 - 虚拟机平台<br>适用于linux的windows子系统和windows虚拟机监控程序平台也最好勾选，需要<strong>重启生效</strong>。<img src="/2022/06/25/win11-wsl/img-20220625215633.png"></li></ul><h1 id="安装wsl和ubuntu"><a href="#安装wsl和ubuntu" class="headerlink" title="安装wsl和ubuntu"></a>安装wsl和ubuntu</h1><ul><li><p>在windows应用商店搜索<code>Windows Subsystem</code>，获取并且安装<br>也可以使用其他方式下载wsl并安装。</p><img src="/2022/06/25/win11-wsl/img-20220625220014.png"></li><li><p>使用wsl2<br>执行<code>wsl --set-default-version 2</code></p></li><li><p>在windows应用商店搜索<code>ubuntu</code>，安装linux发行版<br>也可以自己选择其他发行版安装。</p><img src="/2022/06/25/win11-wsl/img-20220625220129.png"></li><li><p>最终可以使用</p><img src="/2022/06/25/win11-wsl/img-20220625221705.png"></li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>列出已安装wsl信息<br><code>wsl -l -v</code></p><p>启动wsl<br><code>wsl -d &lt;自定义的系统名&gt;</code></p><p>设置wsl版本为2<br><code>wsl --set-version &lt;自定义的系统名&gt; 2</code></p><p>关闭系统<br><code>wsl --shutdown -n &lt;自定义的系统名&gt;</code></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>linux发行版启动时遇到报错<code>占位程序接收到错误数据</code><br>通过执行<code>netsh winsock reset</code>解决</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言基础</title>
      <link href="/2022/06/05/hello-go/"/>
      <url>/2022/06/05/hello-go/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言基础语法介绍"><a href="#Go语言基础语法介绍" class="headerlink" title="Go语言基础语法介绍"></a>Go语言基础语法介绍</h2><ul><li><p>Google开源</p></li><li><p>编译型语言</p></li></ul><p>特点：</p><ul><li><p>语法简洁</p></li><li><p>开发效率高</p></li><li><p>执行性能好</p></li></ul><p>参考:<a href="http://www.liwenzhou.com" target="_blank" rel="noopener">www.liwenzhou.com</a>  <a href="https://go.dev/tour/welcome/1" target="_blank" rel="noopener">https://go.dev/tour/welcome/1</a></p><h2 id="Go开发环境搭建"><a href="#Go开发环境搭建" class="headerlink" title="Go开发环境搭建"></a>Go开发环境搭建</h2><p>Go开发包镜像地址：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p><p>安装好后，cmd下运行<code>go version</code>显示版本号</p><h2 id="go语法"><a href="#go语法" class="headerlink" title="go语法"></a>go语法</h2><h3 id="包、变量、函数"><a href="#包、变量、函数" class="headerlink" title="包、变量、函数"></a>包、变量、函数</h3><pre><code>推荐import package方式import (    &quot;fmt&quot;    &quot;math&quot;)</code></pre><p><strong>函数</strong></p><p>func 函数名(参数名 类型,…) 返回值… {</p><p>}</p><ul><li><p>多个参数同一类型时，支持简写<code>(x, y int)</code></p></li><li><p>支持多个返回值时 声明为<code>func swap(x, y string) (string, string)</code>   返回为 <code>return x, y</code></p></li><li><p>支持return named return values   声明为<code>func test(sum int)(x, y int)</code>   返回为 <code>return</code></p></li></ul><p><strong>变量</strong></p><ul><li><p>var 变量名… 类型   // 声明</p></li><li><p><code>var x, y int = 1, 2</code> // 声明加初始化</p></li><li><p><code>x := 1</code>            // 短变量声明，类型推导出x是什么类型</p></li></ul><p><strong>基本类型</strong></p><pre><code>boolstringint  int8  int16  int32  int64uint uint8 uint16 uint32 uint64 uintptrbyte // alias for uint8rune // alias for int32     // represents a Unicode code pointfloat32 float64complex64 complex128zero values：0 for numeric types,false for the boolean type, and&quot;&quot; (the empty string) for strings.nil for other type</code></pre><p><strong>类型转换</strong></p><p><code>T(v)</code></p><p><strong>常量</strong></p><p><code>const 变量 = 值</code></p><ul><li>不能使用短变量声明法</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><strong>for</strong></p><pre><code>for init statment; condition statement; post statement {}</code></pre><ul><li><p>初始和结束执行的语句可以省略(保留分号)</p></li><li><p>语句只有condition，效果为像使用while一样(没有分号)</p></li><li><p>语句连condition都没有(用于死循环)</p></li></ul><p><strong>if</strong></p><pre><code>if condition {}</code></pre><ul><li><p>没有小括号，但是{}是必须的</p></li><li><p>变形 <code>if init statement; condition stament {}</code>(init statement声明的短变量作用域在if else块内)</p></li></ul><p><strong>switch</strong></p><pre><code>switch init statement;condition{    case 值1：    case 值2}</code></pre><ul><li><p>go自动在每个case后break</p></li><li><p>switch case的条件不必是const的，也不一定是integer</p></li><li><p>switch语句也可以带短变量声明语句，也可以省略condition(等于switch true)</p></li></ul><p><strong>defer</strong></p><pre><code>func test() {    fmt.Println(&quot;123&quot;)}func main() {    defer fmt.Println(&quot;world&quot;)    fmt.Println(&quot;hello&quot;)    test()}</code></pre><ul><li><p>defer语句会立即求值，但是推迟到函数返回之前执行。</p></li><li><p>多个defer语句会压栈，直到函数返回时，多个defer会按出栈顺序调用</p></li></ul><h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3><p><strong>pointer</strong></p><p><code>i= 42</code></p><p><code>p := &amp;i</code></p><ul><li>默认初始化为nil，没有指数算术</li></ul><p><strong>struct</strong></p><pre><code>type Vertex struct {    X int    Y int}func main() {    v := Vertex{1, 2}    p := &amp;v    p.X = 666    fmt.Println(v)}</code></pre><ul><li>可以使用v.X 也可以使用指针p.X访问成员</li></ul><p><strong>array</strong></p><pre><code>var a [2]stringa[0] = &quot;Hello&quot;a[1] = &quot;World&quot;fmt.Println(a)</code></pre><ul><li>array是值，数组长度固定</li></ul><p><strong>slice</strong></p><pre><code>primes := [6]int{2, 3, 5, 7, 11, 13}var s []int = primes[:4]  //切片fmt.Println(s)</code></pre><ul><li><p>切片是引用，切片底层指向数组，长度可扩容</p></li><li><p>切片<code>a[low:high];</code>省略low为0，省略high为切片的len</p></li><li><p>make 构造，<code>make([]int, len, cap)</code></p></li><li><p>切片元素为切片</p></li><li><p>append 可以添加一个元素、多个元素、一个切片。当切片容量不足，则新创建一个大数组，切片指向新数组</p></li></ul><p><strong>range</strong></p><ul><li><p>range 数组；slice；返回 inedx, value</p></li><li><p>range map；返回 key, value</p></li><li><p>匿名变量 <code>_</code> ，接收不使用的值</p></li></ul><p><strong>map</strong></p><ul><li><p>删除元素  <code>delete(map1, key)</code></p></li><li><p>测试key值是否存在 <code>value， ok = map1[key]</code></p></li></ul><p><strong>function</strong></p><p><code>func 函数名(参数) 返回值 {}</code></p><ul><li><p>函数可以作为参数，也可以作为返回值</p></li><li><p>函数闭包：闭包是一个函数值，它从其主体外部引用变量。该函数可以访问并分配给引用的变量。函数是绑定到变量的</p></li></ul><h3 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h3><p><strong>method</strong></p><p><code>func (receiver) 函数名(参数) 返回值 {}</code></p><ul><li><p>作用于特定的receiver的函数</p></li><li><p>声明method和reveiver必须在同一个package</p></li><li><p>特定的receiver可以不是struct，可以是基本数据类型。</p><p>指针receiver 和 值receiver；指针receiver可以修改值，(传参无需关心传的是指针还是值)(函数则不行，函数必须要确定传参类型匹配)</p></li></ul><p><strong>interface</strong></p><pre><code>type T struct {    S string}type I interface {    Abs() float64}func (t T) Abs() { // 类型通过实现其method来实现接口    fmt.Println(t.S)}var i I = T{&quot;hello&quot;}i.M()</code></pre><ul><li><p>接口值可以视为(value, type)，在接口值上调用方法会在其基础类型上执行相同名称的方法。</p></li><li><p><code>var i I</code>；一个空的接口值，其value和type都是nil，调用会产生运行时错误</p></li><li><p><code>var i interface{}</code>；一个空接口，可以保存任何类型的值</p></li></ul><p><code>s, ok := i.(string)</code>； 判断接口是否含有类型string</p><ul><li><p>fmt就是其他都实现了String接口</p></li><li><p>go中的error是其他实现了Error接口</p></li></ul><pre><code>type Stringer interface {    String() string}type error interface {    Error() string}</code></pre><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p><strong>goroutines</strong></p><ul><li>协程，Go运行时管理的轻量级线程，goroutines运行在相同的地址空间，所以对共享内存的访问必须同步，可以借助sync包</li></ul><p><strong>channels</strong></p><pre><code>ch &lt;- v    // 将v值发送到通道chv := &lt;-ch  // 从通道ch接收，并给v赋值数据按照箭头方向流动// 使用前必须创建ch := make(chan int)</code></pre><ul><li><p>channel有类型，可以发送和接收 ，运算符&lt;-</p></li><li><p>默认情况下，无缓冲的channel，发送和接收是阻塞的，这允许在没有显式锁或条件变量的情况下进行同步</p></li><li><p>有缓冲的channel  <code>make(chan int, 100)</code>, 可以异步，当缓冲区满时再写入才会阻塞，缓冲区空时读取才会阻塞</p></li><li><p>通道可以close，可以通过ok测试 <code>v, ok := &lt;- ch</code>，只有发送者可以关闭通道，在关闭的通道里发送会panic，对于for range通道运算，需要主动close来告知接收者通道没有值了</p></li></ul><p><strong>select</strong></p><ul><li><p>select 语句让gotroutine等待多个通信操作， select阻塞直到它的一个case可以运行，如果都准备好了，它随机运行一个。</p></li><li><p>select 可以有default语句，当没有case准备好时，就执行default语句</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, Hexo</title>
      <link href="/2020/01/14/hexo-new/"/>
      <url>/2020/01/14/hexo-new/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo是本次新挖掘出来的搭建网站的快速工具，容易上手，且样式好看。</p></blockquote><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>一直想要一个永久的域名，但是在学生时代经费紧张，就只能先这么凑合了。偶然有一次看到了Hexo + Github搭建个人网站的例子，Hexo是一款强大的产品，可以快速的生成页面。我也有尝试另外一款是wordpress，但是我本地测试后还有很多不易用的感受，而且我也不是专业的前端程序员，而Hexo可以根据网上的教程快速的搭建成自己舒服的样子，所以就被我pick。今天正式启用此站点，Hello Hexo！</p><h2 id="2020-6-26"><a href="#2020-6-26" class="headerlink" title="2020.6.26"></a>2020.6.26</h2><p>一次偶然的机会看到百度云可以1元得到一个域名和一个虚拟主机资源，所以产生了<code>www.yteng3456.xyz</code>，后来我也在这个域名上部署了php搭建的个人页面以及在复习专业课时总结的一些文章，但是后面时间到了域名失效了，如果要用还得重新备案；虚拟主机的资源也失效了，为了折腾，就把写的文章搬到了Hexo+Github去，就当是体验了一把个人网站上云。</p><h2 id="2021-06-30"><a href="#2021-06-30" class="headerlink" title="2021.06.30"></a>2021.06.30</h2><p>hexo 文章插图技巧<br>1.站点的_config.yml的 post_asset_folder: false改为true<br>2.在新建文章的时候<code>hexo new hello</code>就会在文章下生成同名文件夹，在文件夹中放图片，在文章中引用即可。</p><pre><code>![](1.png)</code></pre><p>hexo源码等保留到了github，换了电脑或者笔记本重装系统后需要重新部署环境</p><ul><li>安装git，配置git账号信息，ssh key</li><li>安装nodejs</li><li>安装hexo <code>npm install -g hexo-cli</code></li><li>安装git部署插件 <code>npm install hexo-deployer-git --save</code></li><li>安装图片路径转换插件 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li></ul><p><code>hexo d</code>失败，报错：<code>typeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code><br>原因：nodejs版本过高，和hexo版本不匹配<br>解决办法：切换nodejs为低版本</p><h2 id="2021-08-15"><a href="#2021-08-15" class="headerlink" title="2021.08.15"></a>2021.08.15</h2><p>hexo文章编写技巧</p><p><code>&lt;!--more--&gt;</code>该标签前面可以写文章摘要</p><p><code>&lt;center&gt;&lt;center/&gt;</code> 该标签可以把摘要居中</p><p><code>&lt;br/&gt;</code>该标签可以插入一个换行</p><p>可以不用<code>![]</code>来插入图片，可以使用<code>&lt;img src=&#39;&#39; width=&#39;20&#39; height=&#39;20&gt;</code>来插入图片</p><h2 id="2022-05-22"><a href="#2022-05-22" class="headerlink" title="2022.05.22"></a>2022.05.22</h2><p>参考别人的主题进行了一次改版，参考网站：<code>https://godweiyang.com/</code><br>Matery主题美化参考：<code>https://blog.csdn.net/kuashijidexibao/article/details/112971657</code><br>为什么要改版？<br>因为之前的风格看的有些厌倦，不能让我很好的坚持写博客，不如换一个风格。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>markdown文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td></td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td></td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床</td></tr><tr><td>top</td><td>true</td><td>推荐文章(文章是否置顶)，如果top为true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>表示该文章是否需要加入到首页轮播封面</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
